import { QueryGetStreamRecordResponse, QueryParamsResponse } from '@bnb-chain/greenfield-cosmos-types/greenfield/payment/query';
import { MsgDeposit, MsgDisableRefund, MsgWithdraw } from '@bnb-chain/greenfield-cosmos-types/greenfield/payment/tx';
import { TxResponse } from '..';
export interface IPayment {
    /**
     * retrieves stream record information for a given stream address.
     */
    getStreamRecord(account: string): Promise<QueryGetStreamRecordResponse>;
    /**
     * deposits BNB to a stream account.
     */
    deposit(msg: MsgDeposit): Promise<TxResponse>;
    /**
     * withdraws BNB from a stream account.
     */
    withdraw(msg: MsgWithdraw): Promise<TxResponse>;
    /**
     * disables refund for a stream account.
     */
    disableRefund(msg: MsgDisableRefund): Promise<TxResponse>;
    params(): Promise<QueryParamsResponse>;
}
export declare class Payment implements IPayment {
    private basic;
    private queryClient;
    getStreamRecord(account: string): Promise<QueryGetStreamRecordResponse>;
    params(): Promise<QueryParamsResponse>;
    deposit(msg: MsgDeposit): Promise<{
        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
    }>;
    withdraw(msg: MsgWithdraw): Promise<{
        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
    }>;
    disableRefund(msg: MsgDisableRefund): Promise<{
        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
    }>;
}
