'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('reflect-metadata');
var tsyringe = require('tsyringe');
var auth = require('@bnb-chain/greenfield-cosmos-types/cosmos/auth/v1beta1/auth');
var tx$2 = require('@bnb-chain/greenfield-cosmos-types/cosmos/bank/v1beta1/tx');
var tx$3 = require('@bnb-chain/greenfield-cosmos-types/greenfield/payment/tx');
var util = require('@ethereumjs/util');
var ethSigUtil = require('@metamask/eth-sig-util');
var secp256k1Compat = require('ethereum-cryptography/secp256k1-compat');
var keys = require('@bnb-chain/greenfield-cosmos-types/cosmos/crypto/secp256k1/keys');
var signingKey = require('@ethersproject/signing-key');
var common = require('@bnb-chain/greenfield-cosmos-types/greenfield/storage/common');
var Long = require('long');
var types = require('@bnb-chain/greenfield-cosmos-types/greenfield/resource/types');
var units = require('@ethersproject/units');
var query$a = require('@bnb-chain/greenfield-cosmos-types/cosmos/base/tendermint/v1beta1/query');
var service = require('@bnb-chain/greenfield-cosmos-types/cosmos/tx/v1beta1/service');
var tx$1 = require('@bnb-chain/greenfield-cosmos-types/cosmos/tx/v1beta1/tx');
var any = require('@bnb-chain/greenfield-cosmos-types/google/protobuf/any');
var protoSigning = require('@cosmjs/proto-signing');
var stargate = require('@cosmjs/stargate');
var tendermintRpc = require('@cosmjs/tendermint-rpc');
var tx = require('@bnb-chain/greenfield-cosmos-types/cosmos/distribution/v1beta1/tx');
var query = require('@bnb-chain/greenfield-cosmos-types/cosmos/auth/v1beta1/query');
var query$1 = require('@bnb-chain/greenfield-cosmos-types/cosmos/bank/v1beta1/query');
var query$6 = require('@bnb-chain/greenfield-cosmos-types/cosmos/crosschain/v1/query');
var query$9 = require('@bnb-chain/greenfield-cosmos-types/cosmos/feegrant/v1beta1/query');
var query$7 = require('@bnb-chain/greenfield-cosmos-types/cosmos/oracle/v1/query');
var query$8 = require('@bnb-chain/greenfield-cosmos-types/greenfield/bridge/query');
var query$5 = require('@bnb-chain/greenfield-cosmos-types/greenfield/challenge/query');
var query$2 = require('@bnb-chain/greenfield-cosmos-types/greenfield/payment/query');
var query$4 = require('@bnb-chain/greenfield-cosmos-types/greenfield/sp/query');
var query$3 = require('@bnb-chain/greenfield-cosmos-types/greenfield/storage/query');
var tx$4 = require('@bnb-chain/greenfield-cosmos-types/greenfield/storage/tx');
var helpers = require('@bnb-chain/greenfield-cosmos-types/helpers');
var tx$5 = require('@bnb-chain/greenfield-cosmos-types/greenfield/challenge/tx');
var tx$7 = require('@bnb-chain/greenfield-cosmos-types/cosmos/oracle/v1/tx');
var tx$6 = require('@bnb-chain/greenfield-cosmos-types/greenfield/bridge/tx');
var tx$8 = require('@bnb-chain/greenfield-cosmos-types/cosmos/feegrant/v1beta1/tx');
var greenfiledFileHandle = require('@bnb-chain/greenfiled-file-handle');
var tx$9 = require('@bnb-chain/greenfield-cosmos-types/greenfield/sp/tx');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var common__namespace = /*#__PURE__*/_interopNamespace(common);
var Long__default = /*#__PURE__*/_interopDefaultLegacy(Long);

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const MsgMultiSendTypeUrl = '/cosmos.bank.v1beta1.MsgMulti';
const MsgMultiSendSDKTypeEIP712 = {
    Msg: [
        { name: 'type', type: 'string' },
        { name: 'from_address', type: 'string' },
        { name: 'to_address', type: 'string' },
        { name: 'amount', type: 'TypeAmount[]' },
    ],
};

const MsgSendTypeUrl = '/cosmos.bank.v1beta1.MsgSend';
const MsgSendSDKTypeEIP712 = {
    Msg: [
        { name: 'type', type: 'string' },
        { name: 'from_address', type: 'string' },
        { name: 'to_address', type: 'string' },
        { name: 'amount', type: 'TypeAmount[]' },
    ],
};

const MsgCreatePaymentAccountTypeUrl = '/greenfield.payment';
const MsgCreatePaymentAccountSDKTypeEIP712 = {
    Msg: [
        {
            name: 'type',
            type: 'string',
        },
        {
            name: 'creaator',
            type: 'string',
        },
    ],
};

const createEIP712 = (types, chainId, message) => {
    return {
        types,
        primaryType: 'Tx',
        domain: {
            name: 'Greenfield Tx',
            version: '1.0.0',
            chainId,
            verifyingContract: 'greenfield',
            salt: '0',
        },
        message,
    };
};
const generateMessage = (accountNumber, sequence, chainCosmosId, memo, fee, msg, timeoutHeight) => {
    return {
        account_number: accountNumber,
        chain_id: chainCosmosId,
        sequence,
        memo,
        fee,
        msg,
        timeout_height: timeoutHeight,
    };
};
const generateTypes = (newTypes) => {
    const types = {
        Coin: [
            { name: 'denom', type: 'string' },
            { name: 'amount', type: 'uint256' },
        ],
        EIP712Domain: [
            { name: 'name', type: 'string' },
            { name: 'version', type: 'string' },
            { name: 'chainId', type: 'uint256' },
            { name: 'verifyingContract', type: 'string' },
            { name: 'salt', type: 'string' },
        ],
        Tx: [
            { name: 'account_number', type: 'uint256' },
            { name: 'chain_id', type: 'uint256' },
            { name: 'fee', type: 'Fee' },
            { name: 'memo', type: 'string' },
            { name: 'msg', type: 'Msg' },
            { name: 'sequence', type: 'uint256' },
            { name: 'timeout_height', type: 'uint256' },
        ],
        Fee: [
            { name: 'amount', type: 'Coin[]' },
            { name: 'gas_limit', type: 'uint256' },
            { name: 'payer', type: 'string' },
            { name: 'granter', type: 'string' },
        ],
        TypeAmount: [
            { name: 'denom', type: 'string' },
            { name: 'amount', type: 'string' },
        ],
    };
    Object.assign(types, newTypes);
    return types;
};
const generateFee = (amount, denom, gas_limit, payer, granter) => {
    return {
        amount: [
            {
                amount,
                denom,
            },
        ],
        gas_limit,
        payer,
        granter,
    };
};

const typeWrapper = (type, msg) => {
    return Object.assign(Object.assign({}, msg), { type });
};

/**
 * @priKey 0x prefix
 */
const getPubKeyByPriKey = (priKey) => {
    const privateKeyBytes = util.toBuffer(priKey);
    const publicKeyBytes = secp256k1Compat.publicKeyCreate(privateKeyBytes);
    const pk = util.bufferToHex(util.toBuffer(publicKeyBytes));
    const pubKey = makeCosmsPubKey(pk);
    return pubKey;
};
const createEIP712Data = (chainId, accountNumber, sequence, typeUrl, MsgSDKTypeEIP712, MsgSDK, txOption) => {
    const { gasLimit, gasPrice, denom, payer } = txOption;
    const fee = generateFee(String(BigInt(gasLimit) * BigInt(gasPrice)), denom, String(gasLimit), payer, '');
    const wrapperTypes = generateTypes(MsgSDKTypeEIP712);
    const wrapperMsg = typeWrapper(typeUrl, MsgSDK);
    const messages = generateMessage(accountNumber, sequence, chainId, '', fee, wrapperMsg, '0');
    return createEIP712(wrapperTypes, chainId, messages);
};
const signEIP712Data = (chainId, accountNumber, sequence, typeUrl, MsgSDKTypeEIP712, MsgSDK, txOption) => {
    const data = createEIP712Data(chainId, accountNumber, sequence, typeUrl, MsgSDKTypeEIP712, MsgSDK, txOption);
    if (!txOption.privateKey) {
        throw new Error('private key is required');
    }
    return ethSigUtil.signTypedData({
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        data,
        version: ethSigUtil.SignTypedDataVersion.V4,
        privateKey: util.toBuffer(txOption.privateKey),
    });
};

/**
 * recover public key from signature
 *
 * @messageHash message hash
 * @signature message signature
 *
 * @returns uncompressed public key
 */
const recoverPk = ({ messageHash, signature }) => {
    const uncompressedPubKey = signingKey.recoverPublicKey(messageHash, signature);
    return signingKey.computePublicKey(uncompressedPubKey, true);
};
/**
 * @pk compressed public key from signature
 * @return eg. { typeUrl: '/ethermint.crypto.v1.ethsecp256k1.PubKey', value: 'CiEC+hp2uVKio9T7x0goOPyHgwUYiRsZ8MeYUrfRX8MxrzM=' }
 */
const makeCosmsPubKey = (pk) => {
    const pubKey = keys.PubKey.fromPartial({
        key: util.toBuffer(pk),
    });
    return {
        typeUrl: '/cosmos.crypto.eth.ethsecp256k1.PubKey',
        value: keys.PubKey.encode(pubKey).finish(),
    };
};
const eip712Hash = (message) => {
    return ethSigUtil.TypedDataUtils.eip712Hash(JSON.parse(message), ethSigUtil.SignTypedDataVersion.V4);
};

/**
 * @addr wallet address
 * @message sign typed v4 data
 */
const sign712Tx = (addr, message) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    // TODO: eth-sig-utils
    /* eslint-disable @typescript-eslint/no-explicit-any */
    const signature = yield ((_a = window.ethereum) === null || _a === void 0 ? void 0 : _a.request({
        method: 'eth_signTypedData_v4',
        params: [addr, message],
    }));
    const messageHash = eip712Hash(message);
    return {
        signature,
        messageHash,
    };
});
const defaultSignTypedData = (addr, message) => __awaiter(void 0, void 0, void 0, function* () {
    var _b;
    const signature = yield ((_b = window.ethereum) === null || _b === void 0 ? void 0 : _b.request({
        method: 'eth_signTypedData_v4',
        params: [addr, message],
    }));
    return signature;
});

const getGasFeeBySimulate = (simulateTxInfo, denom = 'BNB') => {
    var _a, _b;
    if (!simulateTxInfo.gasInfo)
        throw new Error('gasInfo not found');
    const gasLimit = BigInt((_a = simulateTxInfo.gasInfo) === null || _a === void 0 ? void 0 : _a.gasUsed.toNumber());
    const gasPrice = (_b = simulateTxInfo.gasInfo) === null || _b === void 0 ? void 0 : _b.minGasPrice.replace(denom, '');
    const gasFee = gasLimit * BigInt(gasPrice);
    return {
        gasLimit,
        gasPrice,
        gasFee: units.formatEther(String(gasFee)),
    };
};

const ZERO_PUBKEY = '0x000000000000000000000000000000000000000000000000000000000000000000';
const DEFAULT_DENOM = ' BNB';

let RpcQueryClient = class RpcQueryClient {
    constructor(rpcUrl) {
        this.rpcUrl = rpcUrl;
        this.rpcClient = null;
        this.txQueryClient = null;
        this.rpcUrl = rpcUrl;
    }
    getRpcClient() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.rpcClient) {
                this.rpcClient = yield makeRpcClient(this.rpcUrl);
            }
            return this.rpcClient;
        });
    }
    getQueryClient() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.txQueryClient) {
                const [client] = yield makeClientWithExtension(this.rpcUrl);
                this.txQueryClient = client;
            }
            return this.txQueryClient;
        });
    }
    getAuthQueryClient() {
        return __awaiter(this, void 0, void 0, function* () {
            const rpcClient = yield this.getRpcClient();
            return new query.QueryClientImpl(rpcClient);
        });
    }
    getBankQueryClient() {
        return __awaiter(this, void 0, void 0, function* () {
            const rpcClient = yield this.getRpcClient();
            return new query$1.QueryClientImpl(rpcClient);
        });
    }
    getPaymentQueryClient() {
        return __awaiter(this, void 0, void 0, function* () {
            const rpcClient = yield this.getRpcClient();
            return new query$2.QueryClientImpl(rpcClient);
        });
    }
    getBucketQueryClient() {
        return __awaiter(this, void 0, void 0, function* () {
            const rpcClient = yield this.getRpcClient();
            return new query$3.QueryClientImpl(rpcClient);
        });
    }
    getSpQueryClient() {
        return __awaiter(this, void 0, void 0, function* () {
            const rpcClient = yield this.getRpcClient();
            return new query$4.QueryClientImpl(rpcClient);
        });
    }
    getChallengeQueryClient() {
        return __awaiter(this, void 0, void 0, function* () {
            const rpcClient = yield this.getRpcClient();
            return new query$5.QueryClientImpl(rpcClient);
        });
    }
    getCrosschainQueryClient() {
        return __awaiter(this, void 0, void 0, function* () {
            const rpcClient = yield this.getRpcClient();
            return new query$6.QueryClientImpl(rpcClient);
        });
    }
    getOracleQueryClient() {
        return __awaiter(this, void 0, void 0, function* () {
            const rpcClient = yield this.getRpcClient();
            return new query$7.QueryClientImpl(rpcClient);
        });
    }
    getBridgeQueryClient() {
        return __awaiter(this, void 0, void 0, function* () {
            const rpcClient = yield this.getRpcClient();
            return new query$8.QueryClientImpl(rpcClient);
        });
    }
    getFeeGrantQueryClient() {
        return __awaiter(this, void 0, void 0, function* () {
            const rpcClient = yield this.getRpcClient();
            return new query$9.QueryClientImpl(rpcClient);
        });
    }
    getStorageQueryClient() {
        return __awaiter(this, void 0, void 0, function* () {
            const rpcClient = yield this.getRpcClient();
            return new query$3.QueryClientImpl(rpcClient);
        });
    }
    getMsgClient() {
        return __awaiter(this, void 0, void 0, function* () {
            const rpcClient = yield this.getRpcClient();
            return new tx.MsgClientImpl(rpcClient);
        });
    }
};
RpcQueryClient = __decorate([
    tsyringe.singleton(),
    __param(0, tsyringe.inject('RPC_URL')),
    __metadata("design:paramtypes", [String])
], RpcQueryClient);
const makeClientWithExtension = (rpcUrl) => __awaiter(void 0, void 0, void 0, function* () {
    const tmClient = yield tendermintRpc.Tendermint37Client.connect(rpcUrl);
    return [
        stargate.QueryClient.withExtensions(tmClient, stargate.setupAuthExtension, stargate.setupAuthzExtension, stargate.setupBankExtension, stargate.setupDistributionExtension, stargate.setupFeegrantExtension, stargate.setupGovExtension, stargate.setupIbcExtension, stargate.setupMintExtension, stargate.setupSlashingExtension, stargate.setupStakingExtension, stargate.setupTxExtension),
        tmClient,
    ];
});
const makeRpcClient = (rpcUrl) => __awaiter(void 0, void 0, void 0, function* () {
    const [, tmClient] = yield makeClientWithExtension(rpcUrl);
    const rpc = stargate.createProtobufRpcClient(new stargate.QueryClient(tmClient));
    return rpc;
});

let Basic = class Basic {
    constructor(rpcUrl, chainId) {
        this.account = tsyringe.container.resolve(Account);
        this.rpcQueryClient = tsyringe.container.resolve(RpcQueryClient);
        this.rpcUrl = rpcUrl;
        this.chainId = chainId;
    }
    getNodeInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            const rpcClient = yield this.rpcQueryClient.getRpcClient();
            const rpc = new query$a.ServiceClientImpl(rpcClient);
            return yield rpc.GetNodeInfo();
        });
    }
    getLatestBlock() {
        return __awaiter(this, void 0, void 0, function* () {
            const rpcClient = yield this.rpcQueryClient.getRpcClient();
            const rpc = new query$a.ServiceClientImpl(rpcClient);
            return yield rpc.GetLatestBlock();
        });
    }
    getLatestBlockHeight() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const latestBlock = yield this.getLatestBlock();
            const height = (_b = (_a = latestBlock.sdkBlock) === null || _a === void 0 ? void 0 : _a.header) === null || _b === void 0 ? void 0 : _b.height;
            if (!height)
                return 0;
            return height.toNumber();
        });
    }
    getSyncing() {
        return __awaiter(this, void 0, void 0, function* () {
            const rpcClient = yield this.rpcQueryClient.getRpcClient();
            const rpc = new query$a.ServiceClientImpl(rpcClient);
            const syncing = yield rpc.GetSyncing();
            return syncing.syncing;
        });
    }
    getBlockByHeight(height) {
        return __awaiter(this, void 0, void 0, function* () {
            const rpcClient = yield this.rpcQueryClient.getRpcClient();
            const rpc = new query$a.ServiceClientImpl(rpcClient);
            return yield rpc.GetBlockByHeight({
                height: Long__default["default"].fromInt(height),
            });
        });
    }
    GetLatestValidatorSet(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const rpcClient = yield this.rpcQueryClient.getRpcClient();
            const rpc = new query$a.ServiceClientImpl(rpcClient);
            const validatorSet = yield rpc.GetLatestValidatorSet(request);
            return validatorSet.blockHeight.toNumber();
        });
    }
    tx(typeUrl, address, MsgSDKTypeEIP712, MsgSDK, msgBytes) {
        return __awaiter(this, void 0, void 0, function* () {
            const accountInfo = yield this.account.getAccount(address);
            const bodyBytes = this.getBodyBytes(typeUrl, msgBytes);
            return {
                simulate: (opts) => __awaiter(this, void 0, void 0, function* () {
                    return yield this.simulateRawTx(bodyBytes, accountInfo, opts);
                }),
                broadcast: (opts) => __awaiter(this, void 0, void 0, function* () {
                    const rawTxBytes = yield this.getRawTxBytes(typeUrl, MsgSDKTypeEIP712, MsgSDK, bodyBytes, accountInfo, opts);
                    return yield this.broadcastRawTx(rawTxBytes);
                }),
            };
        });
    }
    simulateRawTx(txBodyBytes, accountInfo, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const rpcClient = yield this.rpcQueryClient.getRpcClient();
            const rpc = new service.ServiceClientImpl(rpcClient);
            const { denom } = options;
            const authInfoBytes = this.getAuthInfoBytes({
                sequence: accountInfo.sequence + '',
                denom,
                gasLimit: 0,
                gasPrice: '0',
                pubKey: makeCosmsPubKey(ZERO_PUBKEY),
            });
            const tx = tx$1.Tx.fromPartial({
                authInfo: tx$1.AuthInfo.decode(authInfoBytes),
                body: tx$1.TxBody.decode(txBodyBytes),
                signatures: [Uint8Array.from([])],
            });
            const request = service.SimulateRequest.fromPartial({
                txBytes: tx$1.Tx.encode(tx).finish(),
            });
            const res = yield rpc.Simulate(request);
            return getGasFeeBySimulate(res, denom);
        });
    }
    broadcastRawTx(txRawBytes) {
        return __awaiter(this, void 0, void 0, function* () {
            const tmClient = yield tendermintRpc.Tendermint37Client.connect(this.rpcUrl);
            const client = yield stargate.StargateClient.create(tmClient);
            return yield client.broadcastTx(txRawBytes);
        });
    }
    getAuthInfoBytes(params) {
        const { pubKey, denom = DEFAULT_DENOM, sequence, gasLimit, gasPrice } = params;
        if (!pubKey)
            throw new Error('pubKey is required');
        const feeAmount = [
            {
                denom,
                amount: String(BigInt(gasLimit) * BigInt(gasPrice)),
            },
        ];
        const feeGranter = undefined;
        const feePayer = undefined;
        const authInfoBytes = protoSigning.makeAuthInfoBytes([{ pubkey: pubKey, sequence: Number(sequence) }], feeAmount, gasLimit, feeGranter, feePayer, 712);
        return authInfoBytes;
    }
    getRawTxBytes(typeUrl, msgEIP712Structor, msgEIP712, bodyBytes, accountInfo, txOption) {
        return __awaiter(this, void 0, void 0, function* () {
            const { denom, gasLimit, gasPrice, privateKey, signTypedDataCallback = defaultSignTypedData, } = txOption;
            const eip712 = this.getEIP712Struct(typeUrl, msgEIP712Structor, accountInfo.accountNumber + '', accountInfo.sequence + '', this.chainId, msgEIP712, txOption);
            let signature, pubKey = undefined;
            if (privateKey) {
                pubKey = getPubKeyByPriKey(privateKey);
                signature = signEIP712Data(this.chainId, accountInfo.accountNumber + '', accountInfo.sequence + '', typeUrl, msgEIP712Structor, msgEIP712, txOption);
            }
            else {
                signature = yield signTypedDataCallback(accountInfo.address, JSON.stringify(eip712));
                const messageHash = eip712Hash(JSON.stringify(eip712));
                const pk = recoverPk({
                    signature,
                    messageHash,
                });
                pubKey = makeCosmsPubKey(pk);
            }
            const authInfoBytes = this.getAuthInfoBytes({
                denom,
                sequence: accountInfo.sequence + '',
                gasLimit,
                gasPrice,
                pubKey,
            });
            const txRaw = tx$1.TxRaw.fromPartial({
                bodyBytes,
                authInfoBytes,
                signatures: [util.toBuffer(signature)],
            });
            return tx$1.TxRaw.encode(txRaw).finish();
        });
    }
    getBodyBytes(typeUrl, msgBytes) {
        const msgWrapped = any.Any.fromPartial({
            typeUrl,
            value: msgBytes,
        });
        const txBody = tx$1.TxBody.fromPartial({
            messages: [msgWrapped],
        });
        return tx$1.TxBody.encode(txBody).finish();
    }
    getEIP712Struct(typeUrl, types, accountNumber, sequence, chainId, msg, txOption) {
        const { gasLimit, gasPrice, denom = DEFAULT_DENOM, payer } = txOption;
        const fee = generateFee(String(BigInt(gasLimit) * BigInt(gasPrice)), denom, String(gasLimit), payer, '');
        const wrapperTypes = generateTypes(types);
        const wrapperMsg = typeWrapper(typeUrl, msg);
        const messages = generateMessage(accountNumber, sequence, chainId, '', fee, wrapperMsg, '0');
        return createEIP712(wrapperTypes, chainId, messages);
    }
};
Basic = __decorate([
    tsyringe.singleton(),
    __param(0, tsyringe.inject('RPC_URL')),
    __param(1, tsyringe.inject('CHAIN_ID')),
    __metadata("design:paramtypes", [String, String])
], Basic);

let Account = class Account {
    constructor(basic) {
        this.basic = basic;
        this.queryClient = tsyringe.container.resolve(RpcQueryClient);
    }
    multiTransfer(address, msg) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.basic.tx(MsgMultiSendTypeUrl, address, MsgMultiSendSDKTypeEIP712, tx$2.MsgMultiSend.toSDK(msg), tx$2.MsgMultiSend.encode(msg).finish());
        });
    }
    createPaymentAccount(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.basic.tx(MsgCreatePaymentAccountTypeUrl, msg.creator, MsgCreatePaymentAccountSDKTypeEIP712, tx$3.MsgCreatePaymentAccount.toSDK(msg), tx$3.MsgCreatePaymentAccount.encode(msg).finish());
        });
    }
    getPaymentAccountsByOwner(owner) {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getPaymentQueryClient();
            return yield rpc.GetPaymentAccountsByOwner({
                owner,
            });
        });
    }
    getModuleAccountByName(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getAuthQueryClient();
            return rpc.ModuleAccountByName({
                name,
            });
        });
    }
    getModuleAccounts() {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getAuthQueryClient();
            return yield rpc.ModuleAccounts();
        });
    }
    getPaymentAccount(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getPaymentQueryClient();
            return yield rpc.PaymentAccount(request);
        });
    }
    getAccountBalance(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getBankQueryClient();
            return yield rpc.Balance(request);
        });
    }
    getAccount(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const client = yield this.queryClient.getQueryClient();
            const account = yield client.auth.account(address);
            if (!account)
                return auth.BaseAccount.fromJSON({});
            return auth.BaseAccount.toJSON(auth.BaseAccount.decode(account.value));
        });
    }
    transfer(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.basic.tx(MsgSendTypeUrl, msg.fromAddress, MsgSendSDKTypeEIP712, tx$2.MsgSend.toSDK(msg), tx$2.MsgSend.encode(msg).finish());
        });
    }
};
Account = __decorate([
    tsyringe.singleton(),
    __param(0, tsyringe.inject(tsyringe.delay(() => Basic))),
    __metadata("design:paramtypes", [Basic])
], Account);

const MsgCreateBucketTypeUrl = '/greenfield.storage.MsgCreateBucket';
const MsgCreateBucketSDKTypeEIP712 = {
    Msg: [
        {
            name: 'type',
            type: 'string',
        },
        {
            name: 'creator',
            type: 'string',
        },
        {
            name: 'bucket_name',
            type: 'string',
        },
        {
            name: 'visibility',
            type: 'string',
        },
        {
            name: 'payment_address',
            type: 'string',
        },
        {
            name: 'primary_sp_address',
            type: 'string',
        },
        {
            name: 'primary_sp_approval',
            type: 'TypePrimarySpApproval',
        },
        {
            name: 'charged_read_quota',
            type: 'uint64',
        },
    ],
    TypePrimarySpApproval: [
        {
            name: 'expired_height',
            type: 'uint64',
        },
        {
            name: 'sig',
            type: 'bytes',
        },
    ],
};

const MsgDeleteBucketTypeUrl = '/greenfield.storage.MsgDeleteBucket';
const MsgDeleteBucketSDKTypeEIP712 = {
    Msg: [
        {
            name: 'type',
            type: 'string',
        },
        {
            name: 'operator',
            type: 'string',
        },
        {
            name: 'bucket_name',
            type: 'string',
        },
    ],
};

const MsgDeletePolicySDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'primary_sp_address',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'uint64',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'uint64',
            name: 'payload_size',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'content_type',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'Uint8Array[]',
            name: 'expect_checksums',
        },
        {
            type: 'string',
            name: 'redundancy_type',
        },
        {
            type: 'string[]',
            name: 'expect_secondary_sp_addresses',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string[]',
            name: 'secondary_sp_addresses',
        },
        {
            type: 'Uint8Array[]',
            name: 'secondary_sp_signatures',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'src_bucket_name',
        },
        {
            type: 'string',
            name: 'dst_bucket_name',
        },
        {
            type: 'string',
            name: 'src_object_name',
        },
        {
            type: 'string',
            name: 'dst_object_name',
        },
        {
            type: 'TypeDstPrimarySpApproval',
            name: 'dst_primary_sp_approval',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string[]',
            name: 'object_ids',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members_to_add',
        },
        {
            type: 'string[]',
            name: 'members_to_delete',
        },
        {
            type: 'string',
            name: 'member',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'TypeChargedReadQuota',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'TypePrincipal',
            name: 'principal',
        },
        {
            type: 'string',
            name: 'resource',
        },
        {
            type: 'StatementSDKType[]',
            name: 'statements',
        },
        {
            type: 'TypeExpirationTime',
            name: 'expiration_time',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'TypePrincipal',
            name: 'principal',
        },
        {
            type: 'string',
            name: 'resource',
        },
    ],
    TypePrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeDstPrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeChargedReadQuota: [
        {
            type: 'uint64',
            name: 'value',
        },
    ],
    TypePrincipal: [
        {
            name: 'type',
        },
        {
            type: 'string',
            name: 'value',
        },
    ],
    TypeExpirationTime: [
        {
            type: 'uint64',
            name: 'seconds',
        },
        {
            type: 'uint64',
            name: 'nanos',
        },
    ],
};

const MsgPutPolicySDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'primary_sp_address',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'uint64',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'uint64',
            name: 'payload_size',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'content_type',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'Uint8Array[]',
            name: 'expect_checksums',
        },
        {
            type: 'string',
            name: 'redundancy_type',
        },
        {
            type: 'string[]',
            name: 'expect_secondary_sp_addresses',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string[]',
            name: 'secondary_sp_addresses',
        },
        {
            type: 'Uint8Array[]',
            name: 'secondary_sp_signatures',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'src_bucket_name',
        },
        {
            type: 'string',
            name: 'dst_bucket_name',
        },
        {
            type: 'string',
            name: 'src_object_name',
        },
        {
            type: 'string',
            name: 'dst_object_name',
        },
        {
            type: 'TypeDstPrimarySpApproval',
            name: 'dst_primary_sp_approval',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string[]',
            name: 'object_ids',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members_to_add',
        },
        {
            type: 'string[]',
            name: 'members_to_delete',
        },
        {
            type: 'string',
            name: 'member',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'TypeChargedReadQuota',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'TypePrincipal',
            name: 'principal',
        },
        {
            type: 'string',
            name: 'resource',
        },
        {
            type: 'StatementSDKType[]',
            name: 'statements',
        },
        {
            type: 'TypeExpirationTime',
            name: 'expiration_time',
        },
    ],
    TypePrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeDstPrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeChargedReadQuota: [
        {
            type: 'uint64',
            name: 'value',
        },
    ],
    TypePrincipal: [
        {
            name: 'type',
        },
        {
            type: 'string',
            name: 'value',
        },
    ],
    TypeExpirationTime: [
        {
            type: 'uint64',
            name: 'seconds',
        },
        {
            type: 'uint64',
            name: 'nanos',
        },
    ],
};

const MsgUpdateBucketInfoSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'primary_sp_address',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'uint64',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'uint64',
            name: 'payload_size',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'content_type',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'Uint8Array[]',
            name: 'expect_checksums',
        },
        {
            type: 'string',
            name: 'redundancy_type',
        },
        {
            type: 'string[]',
            name: 'expect_secondary_sp_addresses',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string[]',
            name: 'secondary_sp_addresses',
        },
        {
            type: 'Uint8Array[]',
            name: 'secondary_sp_signatures',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'src_bucket_name',
        },
        {
            type: 'string',
            name: 'dst_bucket_name',
        },
        {
            type: 'string',
            name: 'src_object_name',
        },
        {
            type: 'string',
            name: 'dst_object_name',
        },
        {
            type: 'TypeDstPrimarySpApproval',
            name: 'dst_primary_sp_approval',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string[]',
            name: 'object_ids',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members_to_add',
        },
        {
            type: 'string[]',
            name: 'members_to_delete',
        },
        {
            type: 'string',
            name: 'member',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'TypeChargedReadQuota',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'visibility',
        },
    ],
    TypePrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeDstPrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeChargedReadQuota: [
        {
            type: 'uint64',
            name: 'value',
        },
    ],
};

const toHex = (char = '') => {
    return char.charCodeAt(0).toString(16);
};
const encodeToHex = (str = '') => {
    return str.split('').map(toHex).join('');
};
const decodeFromHex = (hex = '') => {
    const result = [];
    for (let i = 0; i < hex.length; i += 2) {
        result.push(String.fromCharCode(parseInt(hex.substr(i, 2), 16)));
    }
    return result.join('');
};
const encodeObjectToHexString = (jsonObject) => {
    const utf8Encoder = new TextEncoder();
    const utf8Bytes = utf8Encoder.encode(JSON.stringify(jsonObject));
    return Array.from(utf8Bytes)
        .map((b) => b.toString(16).padStart(2, '0'))
        .join('');
};
const encodeToHexString = (str = '') => {
    const utf8Encoder = new TextEncoder();
    const utf8Bytes = utf8Encoder.encode(str);
    return Array.from(utf8Bytes)
        .map((b) => b.toString(16).padStart(2, '0'))
        .join('');
};
const hexToBytes = (hex = '') => {
    const bytes = new Uint8Array(hex.length / 2);
    for (let i = 0; i < hex.length; i += 2) {
        bytes[i / 2] = parseInt(hex.slice(i, i + 2), 16);
    }
    return bytes;
};
function uint8ArrayToJson(uint8Array) {
    const decoder = new TextDecoder('utf-8');
    const jsonString = decoder.decode(uint8Array);
    return JSON.parse(jsonString);
}
const decodeObjectFromHexString = (hex = '') => {
    return uint8ArrayToJson(hexToBytes(hex));
};

const MOCK_SIGNATURE = '1234567812345678123456781234567812345678123456781234567812345678';
const NORMAL_ERROR_CODE = 404;
const METHOD_GET = 'GET';
const METHOD_PUT = 'PUT';
function timeoutAfter(duration) {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            reject(new Error('request time out'));
        }, duration);
    });
}
const fetchWithTimeout = (fetchUrl = '', fetchOptions = {}, duration = 30000) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const response = yield Promise.race([timeoutAfter(duration), fetch(fetchUrl, fetchOptions)]);
        return response;
    }
    catch (error) {
        return Promise.reject(error);
    }
});

const IP_REGEX = /^(\d+\.){3}\d+$/g;
const ALLOW_REGEX = /^[a-z0-9][a-z0-9.\-]{1,61}[a-z0-9]$/g;
const dotdotComponent = '..';
const dotComponent = '.';
const slashSeparator = '/';
const isValidBucketName = (bucketName) => {
    if (!bucketName) {
        throw new Error('Bucket name is empty, please check.');
    }
    const length = bucketName.length;
    if (length < 3 || length > 63) {
        throw new Error(`Bucket name length is required to be between 3~63, please check.`);
    }
    if (bucketName.match(IP_REGEX)) {
        throw new Error('The bucket name %s cannot be formatted as an IP address, please check.');
    }
    if (bucketName.includes('..') || bucketName.includes('.-') || bucketName.includes('-.')) {
        throw new Error('Bucket name contains invalid characters, please check.');
    }
    if (!bucketName.match(ALLOW_REGEX)) {
        throw new Error('Bucket name can only include lowercase letters, numbers, commas and hyphen, please check.');
    }
    if (bucketName[0] === '-' ||
        bucketName[length - 1] === '-' ||
        bucketName[0] === '.' ||
        bucketName[length - 1] === '.') {
        throw new Error('Bucket name %must start and end with a lowercase letter or number, please check.');
    }
    return true;
};
const hasBadPathComponent = (path) => {
    const newPath = path.trim();
    for (const p of newPath.split(slashSeparator)) {
        switch (p.trim()) {
            case dotdotComponent:
            case dotComponent:
                return true;
        }
    }
    return false;
};
const isUTF8 = (str) => {
    try {
        new TextDecoder('utf-8').decode(new TextEncoder().encode(str));
        return true;
    }
    catch (_a) {
        return false;
    }
};
const isValidObjectName = (objectName) => {
    if (!objectName) {
        throw new Error('Object name is empty, please check.');
    }
    if (objectName.length > 1024) {
        throw new Error('Object name is limited to 1024 at most, please check.');
    }
    if (hasBadPathComponent(objectName)) {
        throw new Error('Object name error, please check.');
    }
    if (!isUTF8(objectName)) {
        throw new Error('Object name is not in UTF-8 format, please check.');
    }
    if (objectName.includes(`//`)) {
        throw new Error(`Object name that contains a "//" is not supported`);
    }
    return true;
};
const isValidAddress = (address) => {
    if (!address) {
        throw new Error('Address is empty, please check.');
    }
    if (address.length > 1024) {
        throw new Error('Address is limited to 1024 at most, please check.');
    }
    return true;
};
const isValidUrl = (url) => {
    if (!url || url.length === 0)
        return false;
    const pattern = new RegExp('^(https?:\\/\\/)?' + // 协议
        '((([a-zA-Z\\d]([a-zA-Z\\d-]{0,61}[a-zA-Z\\d])?)\\.)+' + // 域名
        '[a-zA-Z]{2,13})' + // 顶级域名
        '(\\:\\d{1,5})?' + // 端口号
        '(\\/[-a-zA-Z\\d%_.~+]*)*' + // 路径
        '(\\?[;&a-zA-Z\\d%_.~+=-]*)?' + // 查询字符串
        '(\\#[-a-zA-Z\\d_]*)?$', 'i'); // 锚点
    return pattern.test(url);
};
// remove specified from prefix and suffix of a string
const trimString = (originString, deleteString) => {
    const delStrLength = deleteString.length;
    if (originString.startsWith(deleteString)) {
        originString = originString.substring(delStrLength);
    }
    if (originString.endsWith(deleteString)) {
        originString = originString.substring(0, originString.length - delStrLength);
    }
    return originString;
};
const generateUrlByBucketName = (endpoint = '', bucketName) => {
    if (!isValidUrl(endpoint)) {
        throw new Error('Invalid endpoint');
    }
    if (!isValidBucketName(bucketName)) ;
    const { protocol } = new URL(endpoint);
    return endpoint.replace(`${protocol}//`, `${protocol}//${bucketName}.`);
};

let Bucket = class Bucket {
    constructor(basic) {
        this.basic = basic;
        this.queryClient = tsyringe.container.resolve(RpcQueryClient);
    }
    getCreateBucketApproval({ bucketName, creator, visibility = 'VISIBILITY_TYPE_PUBLIC_READ', chargedReadQuota, spInfo, duration, }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!spInfo.primarySpAddress) {
                    throw new Error('Primary sp address is missing');
                }
                if (!isValidBucketName(bucketName)) ;
                if (!creator) {
                    throw new Error('Empty creator address');
                }
                const endpoint = spInfo.endpoint;
                const msg = {
                    bucket_name: bucketName,
                    creator,
                    visibility,
                    primary_sp_address: spInfo.primarySpAddress,
                    primary_sp_approval: {
                        expired_height: '0',
                        sig: '',
                    },
                    charged_read_quota: chargedReadQuota,
                    payment_address: '',
                };
                const url = endpoint + '/greenfield/admin/v1/get-approval?action=CreateBucket';
                const unSignedMessageInHex = encodeObjectToHexString(msg);
                const headers = new Headers({
                    // TODO: replace when offchain release
                    Authorization: `authTypeV2 ECDSA-secp256k1, Signature=${MOCK_SIGNATURE}`,
                    'X-Gnfd-Unsigned-Msg': unSignedMessageInHex,
                });
                const result = yield fetchWithTimeout(url, {
                    headers,
                    method: METHOD_GET,
                }, duration);
                const { status } = result;
                if (!result.ok) {
                    return {
                        code: -1,
                        message: 'Get create bucket approval error.',
                        statusCode: status,
                    };
                }
                const resultContentType = result.headers.get('Content-Type');
                if (resultContentType === 'text/xml' || resultContentType === 'application/xml') {
                    const xmlText = yield result.text();
                    const xml = yield new window.DOMParser().parseFromString(xmlText, 'text/xml');
                    return {
                        code: -1,
                        xml,
                        message: 'Get create bucket approval error.',
                        statusCode: status,
                    };
                }
                const signedMsgString = result.headers.get('X-Gnfd-Signed-Msg') || '';
                const signedMsg = decodeObjectFromHexString(signedMsgString);
                return {
                    code: 0,
                    message: 'Get create bucket approval success.',
                    body: signedMsgString,
                    statusCode: status,
                    signedMsg: signedMsg,
                };
            }
            catch (error) {
                return { code: -1, message: error.message, statusCode: NORMAL_ERROR_CODE };
            }
        });
    }
    createBucketTx(msg, signedMsg) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.basic.tx(MsgCreateBucketTypeUrl, msg.creator, MsgCreateBucketSDKTypeEIP712, Object.assign(Object.assign({}, signedMsg), { type: MsgCreateBucketTypeUrl, charged_read_quota: signedMsg.charged_read_quota, visibility: signedMsg.visibility, primary_sp_approval: {
                    expired_height: signedMsg.primary_sp_approval.expired_height,
                    sig: signedMsg.primary_sp_approval.sig,
                } }), tx$4.MsgCreateBucket.encode(msg).finish());
        });
    }
    createBucket(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const { signedMsg } = yield this.getCreateBucketApproval(params);
            if (!signedMsg) {
                throw new Error('Get create bucket approval error');
            }
            const msg = {
                bucketName: signedMsg.bucket_name,
                creator: signedMsg.creator,
                visibility: common.visibilityTypeFromJSON(signedMsg.visibility),
                primarySpAddress: signedMsg.primary_sp_address,
                primarySpApproval: {
                    expiredHeight: Long__default["default"].fromString(signedMsg.primary_sp_approval.expired_height),
                    sig: helpers.bytesFromBase64(signedMsg.primary_sp_approval.sig),
                },
                chargedReadQuota: signedMsg.charged_read_quota
                    ? Long__default["default"].fromString('0')
                    : Long__default["default"].fromString(signedMsg.charged_read_quota),
                paymentAddress: '',
            };
            return yield this.createBucketTx(msg, signedMsg);
        });
    }
    deleteBucket(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.basic.tx(MsgDeleteBucketTypeUrl, msg.operator, MsgDeleteBucketSDKTypeEIP712, tx$4.MsgDeleteBucket.toSDK(msg), tx$4.MsgDeleteBucket.encode(msg).finish());
        });
    }
    headBucket(bucketName) {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getBucketQueryClient();
            return yield rpc.HeadBucket({
                bucketName,
            });
        });
    }
    headBucketById(bucketId) {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getBucketQueryClient();
            return yield rpc.HeadBucketById({
                bucketId,
            });
        });
    }
    getVerifyPermission(bucketName, operator, actionType) {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getBucketQueryClient();
            return rpc.VerifyPermission({
                bucketName,
                operator,
                objectName: '',
                actionType,
            });
        });
    }
    getUserBuckets(configParam) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { address, duration = 30000, endpoint } = configParam;
                if (!isValidAddress(address)) ;
                if (!isValidUrl(endpoint)) {
                    throw new Error('Invalid endpoint');
                }
                const url = endpoint;
                const signature = MOCK_SIGNATURE;
                const headers = new Headers({
                    // todo place the correct authorization string
                    Authorization: `authTypeV2 ECDSA-secp256k1, Signature=${signature}`,
                    'X-Gnfd-User-Address': address,
                });
                const result = yield fetchWithTimeout(url, {
                    headers,
                    method: METHOD_GET,
                }, duration);
                const { status } = result;
                if (!result.ok) {
                    return { code: -1, message: 'Get bucket error.', statusCode: status };
                }
                const { buckets } = yield result.json();
                return {
                    code: 0,
                    message: 'Get bucket success.',
                    statusCode: status,
                    body: buckets,
                };
            }
            catch (error) {
                return { code: -1, message: error.message, statusCode: NORMAL_ERROR_CODE };
            }
        });
    }
    getBucketReadQuota(configParam) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { bucketName, endpoint, duration = 30000, year, month } = configParam;
                // todo generate real signature
                const signature = MOCK_SIGNATURE;
                if (!isValidUrl(endpoint)) {
                    throw new Error('Invalid endpoint');
                }
                if (!isValidBucketName(bucketName)) ;
                const currentDate = new Date();
                const finalYear = year ? year : currentDate.getFullYear();
                const finalMonth = month ? month : currentDate.getMonth() + 1;
                const formattedMonth = finalMonth.toString().padStart(2, '0'); // format month to 2 digits, like "01"
                const url = generateUrlByBucketName(endpoint, bucketName) +
                    `/?read-quota&year-month=${finalYear}-${formattedMonth}`;
                const headers = new Headers({
                    Authorization: `authTypeV2 ECDSA-secp256k1, Signature=${signature}`,
                });
                const result = yield fetchWithTimeout(url, {
                    headers,
                    method: METHOD_GET,
                }, duration);
                const { status } = result;
                if (!result.ok) {
                    return { code: -1, message: 'Get Bucket Quota error.', statusCode: status };
                }
                const resultContentType = result.headers.get('Content-Type');
                // Will receive xml when get object met error
                if (resultContentType === 'text/xml' || resultContentType === 'application/xml') {
                    const xmlText = yield result.text();
                    const xml = yield new window.DOMParser().parseFromString(xmlText, 'text/xml');
                    const ReadQuotaSize = xml.getElementsByTagName('ReadQuotaSize')[0]
                        .textContent;
                    const SPFreeReadQuotaSize = xml.getElementsByTagName('SPFreeReadQuotaSize')[0].textContent;
                    const ReadConsumedSize = xml.getElementsByTagName('ReadConsumedSize')[0]
                        .textContent;
                    return {
                        code: 0,
                        body: {
                            readQuota: Number(ReadQuotaSize !== null && ReadQuotaSize !== void 0 ? ReadQuotaSize : '0'),
                            freeQuota: Number(SPFreeReadQuotaSize !== null && SPFreeReadQuotaSize !== void 0 ? SPFreeReadQuotaSize : '0'),
                            consumedQuota: Number(ReadConsumedSize !== null && ReadConsumedSize !== void 0 ? ReadConsumedSize : '0'),
                        },
                        message: 'Get bucket read quota.',
                        statusCode: status,
                    };
                }
                else {
                    return {
                        code: -1,
                        message: 'Get bucket read quota error.',
                        statusCode: status,
                    };
                }
            }
            catch (error) {
                return { code: -1, message: error.message, statusCode: NORMAL_ERROR_CODE };
            }
        });
    }
    updateBucketInfo(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.basic.tx('/greenfield.storage.MsgUpdateBucketInfo', msg.operator, MsgUpdateBucketInfoSDKTypeEIP712, tx$4.MsgUpdateBucketInfo.toSDK(msg), tx$4.MsgUpdateBucketInfo.encode(msg).finish());
        });
    }
    putBucketPolicy(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.basic.tx('/greenfield.storage.MsgPutPolicy', msg.operator, MsgPutPolicySDKTypeEIP712, tx$4.MsgPutPolicy.toSDK(msg), tx$4.MsgPutPolicy.encode(msg).finish());
        });
    }
    deleteBucketPolicy(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            const typeUrl = '/greenfield.storage.MsgDeletePolicy';
            return yield this.basic.tx(typeUrl, msg.operator, MsgDeletePolicySDKTypeEIP712, tx$4.MsgDeletePolicy.toSDK(msg), tx$4.MsgDeletePolicy.encode(msg).finish());
        });
    }
};
Bucket = __decorate([
    tsyringe.singleton(),
    __param(0, tsyringe.inject(tsyringe.delay(() => Basic))),
    __metadata("design:paramtypes", [Basic])
], Bucket);

const MsgAttestSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'challenger',
        },
        {
            type: 'string',
            name: 'sp_operator_address',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'uint64',
            name: 'segment_index',
        },
        {
            type: 'bool',
            name: 'random_index',
        },
        {
            type: 'string',
            name: 'submitter',
        },
        {
            type: 'uint64',
            name: 'challenge_id',
        },
        {
            type: 'string',
            name: 'object_id',
        },
        {
            type: 'string',
            name: 'sp_operator_address',
        },
        {
            type: 'string',
            name: 'vote_result',
        },
        {
            type: 'string',
            name: 'challenger_address',
        },
        {
            type: 'uint64[]',
            name: 'vote_validator_set',
        },
        {
            type: 'bytes',
            name: 'vote_agg_signature',
        },
    ],
};

const MsgSubmitSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'challenger',
        },
        {
            type: 'string',
            name: 'sp_operator_address',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'uint64',
            name: 'segment_index',
        },
        {
            type: 'bool',
            name: 'random_index',
        },
    ],
};

let Challenge = class Challenge {
    constructor(basic) {
        this.basic = basic;
        this.queryClient = tsyringe.container.resolve(RpcQueryClient);
    }
    submitChallenge(address, msg) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.basic.tx('/greenfield.challenge.MsgSubmit', address, MsgSubmitSDKTypeEIP712, tx$5.MsgSubmit.toSDK(msg), tx$5.MsgSubmit.encode(msg).finish());
        });
    }
    attestChallenge(address, msg) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.basic.tx('/greenfield.challenge.MsgAttest', address, MsgAttestSDKTypeEIP712, tx$5.MsgAttest.toSDK(msg), tx$5.MsgAttest.encode(msg).finish());
        });
    }
    latestAttestedChallenges() {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getChallengeQueryClient();
            return yield rpc.LatestAttestedChallenges();
        });
    }
    inturnAttestationSubmitter() {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getChallengeQueryClient();
            return yield rpc.InturnAttestationSubmitter();
        });
    }
};
Challenge = __decorate([
    tsyringe.singleton(),
    __param(0, tsyringe.inject(tsyringe.delay(() => Basic))),
    __metadata("design:paramtypes", [Basic])
], Challenge);

const MsgClaimSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'from_address',
        },
        {
            type: 'uint64',
            name: 'src_chain_id',
        },
        {
            type: 'uint64',
            name: 'dest_chain_id',
        },
        {
            type: 'uint64',
            name: 'sequence',
        },
        {
            type: 'uint64',
            name: 'timestamp',
        },
        {
            type: 'bytes',
            name: 'payload',
        },
        {
            type: 'uint64[]',
            name: 'vote_address_set',
        },
        {
            type: 'bytes',
            name: 'agg_signature',
        },
    ],
};

const MsgTransferOutTypeUrl = '/greenfield.bridge.MsgTransferOut';
const MsgTransferOutSDKTypeEIP712 = {
    Msg: [
        {
            name: 'type',
            type: 'string',
        },
        {
            name: 'from',
            type: 'string',
        },
        {
            name: 'to',
            type: 'string',
        },
        {
            name: 'amount',
            type: 'TypeAmount',
        },
    ],
};

const MsgMirrorBucketSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'primary_sp_address',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'uint64',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'uint64',
            name: 'payload_size',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'content_type',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'Uint8Array[]',
            name: 'expect_checksums',
        },
        {
            type: 'string',
            name: 'redundancy_type',
        },
        {
            type: 'string[]',
            name: 'expect_secondary_sp_addresses',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string[]',
            name: 'secondary_sp_addresses',
        },
        {
            type: 'Uint8Array[]',
            name: 'secondary_sp_signatures',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'src_bucket_name',
        },
        {
            type: 'string',
            name: 'dst_bucket_name',
        },
        {
            type: 'string',
            name: 'src_object_name',
        },
        {
            type: 'string',
            name: 'dst_object_name',
        },
        {
            type: 'TypeDstPrimarySpApproval',
            name: 'dst_primary_sp_approval',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string[]',
            name: 'object_ids',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members_to_add',
        },
        {
            type: 'string[]',
            name: 'members_to_delete',
        },
        {
            type: 'string',
            name: 'member',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'TypeChargedReadQuota',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'TypePrincipal',
            name: 'principal',
        },
        {
            type: 'string',
            name: 'resource',
        },
        {
            type: 'StatementSDKType[]',
            name: 'statements',
        },
        {
            type: 'TypeExpirationTime',
            name: 'expiration_time',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'TypePrincipal',
            name: 'principal',
        },
        {
            type: 'string',
            name: 'resource',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'id',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'id',
        },
    ],
    TypePrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeDstPrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeChargedReadQuota: [
        {
            type: 'uint64',
            name: 'value',
        },
    ],
    TypePrincipal: [
        {
            name: 'type',
        },
        {
            type: 'string',
            name: 'value',
        },
    ],
    TypeExpirationTime: [
        {
            type: 'uint64',
            name: 'seconds',
        },
        {
            type: 'uint64',
            name: 'nanos',
        },
    ],
};

const MsgMirrorGroupSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'primary_sp_address',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'uint64',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'uint64',
            name: 'payload_size',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'content_type',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'Uint8Array[]',
            name: 'expect_checksums',
        },
        {
            type: 'string',
            name: 'redundancy_type',
        },
        {
            type: 'string[]',
            name: 'expect_secondary_sp_addresses',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string[]',
            name: 'secondary_sp_addresses',
        },
        {
            type: 'Uint8Array[]',
            name: 'secondary_sp_signatures',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'src_bucket_name',
        },
        {
            type: 'string',
            name: 'dst_bucket_name',
        },
        {
            type: 'string',
            name: 'src_object_name',
        },
        {
            type: 'string',
            name: 'dst_object_name',
        },
        {
            type: 'TypeDstPrimarySpApproval',
            name: 'dst_primary_sp_approval',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string[]',
            name: 'object_ids',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members_to_add',
        },
        {
            type: 'string[]',
            name: 'members_to_delete',
        },
        {
            type: 'string',
            name: 'member',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'TypeChargedReadQuota',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'TypePrincipal',
            name: 'principal',
        },
        {
            type: 'string',
            name: 'resource',
        },
        {
            type: 'StatementSDKType[]',
            name: 'statements',
        },
        {
            type: 'TypeExpirationTime',
            name: 'expiration_time',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'TypePrincipal',
            name: 'principal',
        },
        {
            type: 'string',
            name: 'resource',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'id',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'id',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'id',
        },
    ],
    TypePrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeDstPrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeChargedReadQuota: [
        {
            type: 'uint64',
            name: 'value',
        },
    ],
    TypePrincipal: [
        {
            name: 'type',
        },
        {
            type: 'string',
            name: 'value',
        },
    ],
    TypeExpirationTime: [
        {
            type: 'uint64',
            name: 'seconds',
        },
        {
            type: 'uint64',
            name: 'nanos',
        },
    ],
};

const MsgMirrorObjectSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'primary_sp_address',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'uint64',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'uint64',
            name: 'payload_size',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'content_type',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'Uint8Array[]',
            name: 'expect_checksums',
        },
        {
            type: 'string',
            name: 'redundancy_type',
        },
        {
            type: 'string[]',
            name: 'expect_secondary_sp_addresses',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string[]',
            name: 'secondary_sp_addresses',
        },
        {
            type: 'Uint8Array[]',
            name: 'secondary_sp_signatures',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'src_bucket_name',
        },
        {
            type: 'string',
            name: 'dst_bucket_name',
        },
        {
            type: 'string',
            name: 'src_object_name',
        },
        {
            type: 'string',
            name: 'dst_object_name',
        },
        {
            type: 'TypeDstPrimarySpApproval',
            name: 'dst_primary_sp_approval',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string[]',
            name: 'object_ids',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members_to_add',
        },
        {
            type: 'string[]',
            name: 'members_to_delete',
        },
        {
            type: 'string',
            name: 'member',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'TypeChargedReadQuota',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'TypePrincipal',
            name: 'principal',
        },
        {
            type: 'string',
            name: 'resource',
        },
        {
            type: 'StatementSDKType[]',
            name: 'statements',
        },
        {
            type: 'TypeExpirationTime',
            name: 'expiration_time',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'TypePrincipal',
            name: 'principal',
        },
        {
            type: 'string',
            name: 'resource',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'id',
        },
    ],
    TypePrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeDstPrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeChargedReadQuota: [
        {
            type: 'uint64',
            name: 'value',
        },
    ],
    TypePrincipal: [
        {
            name: 'type',
        },
        {
            type: 'string',
            name: 'value',
        },
    ],
    TypeExpirationTime: [
        {
            type: 'uint64',
            name: 'seconds',
        },
        {
            type: 'uint64',
            name: 'nanos',
        },
    ],
};

let CrossChain = class CrossChain {
    constructor() {
        this.basic = tsyringe.container.resolve(Basic);
        this.queryClient = tsyringe.container.resolve(RpcQueryClient);
    }
    transferOut(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.basic.tx(MsgTransferOutTypeUrl, msg.from, MsgTransferOutSDKTypeEIP712, tx$6.MsgTransferOut.toSDK(msg), tx$6.MsgTransferOut.encode(msg).finish());
        });
    }
    claims(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.basic.tx('/cosmos.oracle.v1.MsgClaim', msg.fromAddress, MsgClaimSDKTypeEIP712, tx$7.MsgClaim.toSDK(msg), tx$7.MsgClaim.encode(msg).finish());
        });
    }
    getChannelSendSequence(channelId) {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getCrosschainQueryClient();
            return yield rpc.SendSequence({
                channelId,
            });
        });
    }
    getChannelReceiveSequence(channelId) {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getCrosschainQueryClient();
            return yield rpc.ReceiveSequence({
                channelId,
            });
        });
    }
    getInturnRelayer() {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getOracleQueryClient();
            return yield rpc.InturnRelayer();
        });
    }
    getCrosschainPackage(channelId, sequence) {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getCrosschainQueryClient();
            return yield rpc.CrossChainPackage({
                channelId,
                sequence: Long__default["default"].fromNumber(sequence),
            });
        });
    }
    mirrorGroup(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.basic.tx('/greenfield.storage.MsgMirrorGroup', msg.operator, MsgMirrorGroupSDKTypeEIP712, tx$4.MsgMirrorGroup.toSDK(msg), tx$4.MsgMirrorGroup.encode(msg).finish());
        });
    }
    mirrorBucket(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.basic.tx('/greenfield.storage.MsgMirrorBucket', msg.operator, MsgMirrorBucketSDKTypeEIP712, tx$4.MsgMirrorBucket.toSDK(msg), tx$4.MsgMirrorBucket.encode(msg).finish());
        });
    }
    mirrorObject(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.basic.tx('/greenfield.storage.MsgMirrorObject', msg.operator, MsgMirrorObjectSDKTypeEIP712, tx$4.MsgMirrorObject.toSDK(msg), tx$4.MsgMirrorObject.encode(msg).finish());
        });
    }
    getParams() {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getBridgeQueryClient();
            return rpc.Params();
        });
    }
};
CrossChain = __decorate([
    tsyringe.singleton()
], CrossChain);

class Distribution {
    constructor() {
        this.basic = tsyringe.container.resolve(Basic);
        this.queryClient = tsyringe.container.resolve(RpcQueryClient);
    }
    setWithdrawAddress(withdrawAddress, delegatorAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getMsgClient();
            return yield rpc.SetWithdrawAddress({
                withdrawAddress,
                delegatorAddress,
            });
        });
    }
    withdrawValidatorCommission(validatorAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getMsgClient();
            return rpc.WithdrawValidatorCommission({
                validatorAddress,
            });
        });
    }
    withdrawDelegatorReward(validatorAddress, delegatorAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getMsgClient();
            return rpc.WithdrawDelegatorReward({
                delegatorAddress,
                validatorAddress,
            });
        });
    }
    fundCommunityPoolundComm(amount, depositor) {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getMsgClient();
            return rpc.FundCommunityPool({
                amount,
                depositor,
            });
        });
    }
}

const MsgGrantAllowanceTypeUrl = '/cosmos/feegrant/v1beta1/MsgGrantAllowance';
const MsgGrantAllowanceSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'granter',
        },
        {
            type: 'string',
            name: 'grantee',
        },
        {
            type: 'TypeAllowance',
            name: 'allowance',
        },
    ],
    TypeAllowance: [
        {
            type: 'string',
            name: 'type_url',
        },
        {
            type: 'bytes',
            name: 'value',
        },
    ],
};

const MsgRevokeAllowanceTypeUrl = '/cosmos/feegrant/v1beta1/MsgRevokeAllowance';
const MsgRevokeAllowanceSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'granter',
        },
        {
            type: 'string',
            name: 'grantee',
        },
        {
            type: 'TypeAllowance',
            name: 'allowance',
        },
        {
            type: 'string',
            name: 'granter',
        },
        {
            type: 'string',
            name: 'grantee',
        },
    ],
    TypeAllowance: [
        {
            type: 'string',
            name: 'type_url',
        },
        {
            type: 'bytes',
            name: 'value',
        },
    ],
};

let FeeGrant = class FeeGrant {
    constructor() {
        this.basic = tsyringe.container.resolve(Basic);
        this.queryClient = tsyringe.container.resolve(RpcQueryClient);
    }
    grantAllowance(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.basic.tx(MsgGrantAllowanceTypeUrl, msg.granter, MsgGrantAllowanceSDKTypeEIP712, tx$8.MsgGrantAllowance.toSDK(msg), tx$8.MsgGrantAllowance.encode(msg).finish());
        });
    }
    revokeAllowance(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.basic.tx(MsgRevokeAllowanceTypeUrl, msg.granter, MsgRevokeAllowanceSDKTypeEIP712, tx$8.MsgRevokeAllowance.toSDK(msg), tx$8.MsgRevokeAllowance.encode(msg).finish());
        });
    }
    getAllowence(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getFeeGrantQueryClient();
            return yield rpc.Allowance(request);
        });
    }
    getAllowences(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getFeeGrantQueryClient();
            return yield rpc.Allowances(request);
        });
    }
};
FeeGrant = __decorate([
    tsyringe.singleton()
], FeeGrant);

const MsgCreateGroupSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'primary_sp_address',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'uint64',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'uint64',
            name: 'payload_size',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'content_type',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'Uint8Array[]',
            name: 'expect_checksums',
        },
        {
            type: 'string',
            name: 'redundancy_type',
        },
        {
            type: 'string[]',
            name: 'expect_secondary_sp_addresses',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string[]',
            name: 'secondary_sp_addresses',
        },
        {
            type: 'Uint8Array[]',
            name: 'secondary_sp_signatures',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'src_bucket_name',
        },
        {
            type: 'string',
            name: 'dst_bucket_name',
        },
        {
            type: 'string',
            name: 'src_object_name',
        },
        {
            type: 'string',
            name: 'dst_object_name',
        },
        {
            type: 'TypeDstPrimarySpApproval',
            name: 'dst_primary_sp_approval',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string[]',
            name: 'object_ids',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members',
        },
    ],
    TypePrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeDstPrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
};

const MsgDeleteGroupSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'primary_sp_address',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'uint64',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'uint64',
            name: 'payload_size',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'content_type',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'Uint8Array[]',
            name: 'expect_checksums',
        },
        {
            type: 'string',
            name: 'redundancy_type',
        },
        {
            type: 'string[]',
            name: 'expect_secondary_sp_addresses',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string[]',
            name: 'secondary_sp_addresses',
        },
        {
            type: 'Uint8Array[]',
            name: 'secondary_sp_signatures',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'src_bucket_name',
        },
        {
            type: 'string',
            name: 'dst_bucket_name',
        },
        {
            type: 'string',
            name: 'src_object_name',
        },
        {
            type: 'string',
            name: 'dst_object_name',
        },
        {
            type: 'TypeDstPrimarySpApproval',
            name: 'dst_primary_sp_approval',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string[]',
            name: 'object_ids',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
    ],
    TypePrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeDstPrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
};

const MsgLeaveGroupSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'primary_sp_address',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'uint64',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'uint64',
            name: 'payload_size',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'content_type',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'Uint8Array[]',
            name: 'expect_checksums',
        },
        {
            type: 'string',
            name: 'redundancy_type',
        },
        {
            type: 'string[]',
            name: 'expect_secondary_sp_addresses',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string[]',
            name: 'secondary_sp_addresses',
        },
        {
            type: 'Uint8Array[]',
            name: 'secondary_sp_signatures',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'src_bucket_name',
        },
        {
            type: 'string',
            name: 'dst_bucket_name',
        },
        {
            type: 'string',
            name: 'src_object_name',
        },
        {
            type: 'string',
            name: 'dst_object_name',
        },
        {
            type: 'TypeDstPrimarySpApproval',
            name: 'dst_primary_sp_approval',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string[]',
            name: 'object_ids',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members_to_add',
        },
        {
            type: 'string[]',
            name: 'members_to_delete',
        },
        {
            type: 'string',
            name: 'member',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
    ],
    TypePrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeDstPrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
};

const MsgUpdateGroupMemberSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'primary_sp_address',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'uint64',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'uint64',
            name: 'payload_size',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'content_type',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'Uint8Array[]',
            name: 'expect_checksums',
        },
        {
            type: 'string',
            name: 'redundancy_type',
        },
        {
            type: 'string[]',
            name: 'expect_secondary_sp_addresses',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string[]',
            name: 'secondary_sp_addresses',
        },
        {
            type: 'Uint8Array[]',
            name: 'secondary_sp_signatures',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'src_bucket_name',
        },
        {
            type: 'string',
            name: 'dst_bucket_name',
        },
        {
            type: 'string',
            name: 'src_object_name',
        },
        {
            type: 'string',
            name: 'dst_object_name',
        },
        {
            type: 'TypeDstPrimarySpApproval',
            name: 'dst_primary_sp_approval',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string[]',
            name: 'object_ids',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members_to_add',
        },
        {
            type: 'string[]',
            name: 'members_to_delete',
        },
    ],
    TypePrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeDstPrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
};

let Group = class Group {
    constructor() {
        this.basic = tsyringe.container.resolve(Basic);
        this.queryClient = tsyringe.container.resolve(RpcQueryClient);
    }
    createGroup(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.basic.tx('/greenfield.storage.MsgCreateGroup', msg.creator, MsgCreateGroupSDKTypeEIP712, tx$4.MsgCreateGroup.toSDK(msg), tx$4.MsgCreateGroup.encode(msg).finish());
        });
    }
    deleteGroup(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.basic.tx('/greenfield.storage.MsgCreateGroup', msg.operator, MsgDeleteGroupSDKTypeEIP712, tx$4.MsgDeleteGroup.toSDK(msg), tx$4.MsgDeleteGroup.encode(msg).finish());
        });
    }
    updateGroupMember(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            if (msg.groupName === '') {
                throw new Error('group name is empty');
            }
            if (msg.membersToAdd.length === 0 && msg.membersToDelete.length === 0) {
                throw new Error('no update member');
            }
            return yield this.basic.tx('/greenfield.storage.MsgUpdateGroupMember', msg.operator, MsgUpdateGroupMemberSDKTypeEIP712, tx$4.MsgUpdateGroupMember.toSDK(msg), tx$4.MsgUpdateGroupMember.encode(msg).finish());
        });
    }
    leaveGroup(address, msg) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.basic.tx('/greenfield.storage.MsgLeaveGroup', address, MsgLeaveGroupSDKTypeEIP712, tx$4.MsgLeaveGroup.toSDK(msg), tx$4.MsgLeaveGroup.encode(msg).finish());
        });
    }
    headGroup(groupName, groupOwner) {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getStorageQueryClient();
            return yield rpc.HeadGroup({
                groupName,
                groupOwner,
            });
        });
    }
    headGroupMember(groupName, groupOwner, member) {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getStorageQueryClient();
            return yield rpc.HeadGroupMember({
                groupName,
                groupOwner,
                member,
            });
        });
    }
    getPolicyOfGroup(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getStorageQueryClient();
            return yield rpc.QueryPolicyForGroup(request);
        });
    }
};
Group = __decorate([
    tsyringe.singleton()
], Group);

const MsgCancelCreateObjectTypeUrl = '/greenfield.storage.MsgCancelCreateObject';
const MsgCancelCreateObjectSDKTypeEIP712 = {
    Msg: [
        {
            name: 'type',
            type: 'string',
        },
        {
            name: 'operator',
            type: 'string',
        },
        {
            name: 'bucket_name',
            type: 'string',
        },
        {
            name: 'object_name',
            type: 'string',
        },
    ],
};

const MsgCreateObjectTypeUrl = '/greenfield.storage.MsgCreateObject';
const MsgCreateObjectSDKTypeEIP712 = {
    Msg: [
        {
            name: 'type',
            type: 'string',
        },
        {
            name: 'creator',
            type: 'string',
        },
        {
            name: 'bucket_name',
            type: 'string',
        },
        {
            name: 'object_name',
            type: 'string',
        },
        {
            name: 'payload_size',
            type: 'uint64',
        },
        {
            name: 'visibility',
            type: 'string',
        },
        {
            name: 'content_type',
            type: 'string',
        },
        {
            name: 'primary_sp_approval',
            type: 'TypePrimarySpApproval',
        },
        {
            name: 'expect_checksums',
            type: 'bytes[]',
        },
        {
            name: 'redundancy_type',
            type: 'string',
        },
        {
            name: 'expect_secondary_sp_addresses',
            type: 'string[]',
        },
    ],
    TypePrimarySpApproval: [
        {
            name: 'expired_height',
            type: 'uint64',
        },
        {
            name: 'sig',
            type: 'bytes',
        },
    ],
};

const MsgDeleteObjectTypeUrl = '/greenfield.storage.MsgDeleteObject';
const MsgDeleteObjectSDKTypeEIP712 = {
    Msg: [
        {
            name: 'type',
            type: 'string',
        },
        {
            name: 'operator',
            type: 'string',
        },
        {
            name: 'bucket_name',
            type: 'string',
        },
        {
            name: 'object_name',
            type: 'string',
        },
    ],
};

let Objectt = class Objectt {
    constructor() {
        this.basic = tsyringe.container.resolve(Basic);
        this.queryClient = tsyringe.container.resolve(RpcQueryClient);
        // private async getObjectStatusFromSP(params: IGetObjectStaus) {
        //   const {bucketInfo} = await this.bucket.headBucket(params.bucketName);
        //   const primarySpAddress = bucketInfo?.primarySpAddress
        //   // const url = params.endpoint + '/greenfield/admin/v1/get-approval?upload-progress=';
        //   // const unSignedMessageInHex = encodeObjectToHexString(msg);
        //   // const headers = new Headers({
        //   //   // TODO: replace when offchain release
        //   //   Authorization: `authTypeV2 ECDSA-secp256k1, Signature=${MOCK_SIGNATURE}`,
        //   //   'X-Gnfd-Unsigned-Msg': unSignedMessageInHex,
        //   // });
        // }
    }
    getCreateObjectApproval({ bucketName, creator, objectName, visibility = 'VISIBILITY_TYPE_PUBLIC_READ', spInfo, duration = 3000, file, redundancyType = 'REDUNDANCY_EC_TYPE', }) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!isValidUrl(spInfo.endpoint)) {
                    throw new Error('Invalid endpoint');
                }
                if (!file) {
                    throw new Error('File is needed');
                }
                if (!isValidBucketName(bucketName)) ;
                if (!isValidObjectName(objectName)) ;
                if (!creator) {
                    throw new Error('empty creator address');
                }
                const buffer = yield file.arrayBuffer();
                const bytes = new Uint8Array(buffer);
                const hashResult = yield greenfiledFileHandle.FileHandler.getPieceHashRoots(bytes);
                const { contentLength, expectCheckSums } = hashResult;
                const finalContentType = file && file.type && file.type.length > 0 ? file.type : 'application/octet-stream';
                const msg = {
                    creator: creator,
                    object_name: objectName,
                    content_type: finalContentType,
                    payload_size: contentLength.toString(),
                    bucket_name: bucketName,
                    visibility,
                    primary_sp_approval: { expired_height: '0', sig: '' },
                    expect_checksums: expectCheckSums,
                    redundancy_type: redundancyType,
                    expect_secondary_sp_addresses: spInfo.secondarySpAddresses,
                };
                const signature = MOCK_SIGNATURE;
                const url = spInfo.endpoint + '/greenfield/admin/v1/get-approval?action=CreateObject';
                const unSignedMessageInHex = encodeObjectToHexString(msg);
                const headers = new Headers({
                    // todo place the correct authorization string
                    Authorization: `authTypeV2 ECDSA-secp256k1, Signature=${signature}`,
                    'X-Gnfd-Unsigned-Msg': unSignedMessageInHex,
                });
                const result = yield fetchWithTimeout(url, {
                    headers,
                    method: METHOD_GET,
                }, duration);
                const { status } = result;
                if (!result.ok) {
                    return {
                        code: -1,
                        message: 'Get create object approval error.',
                        statusCode: status,
                    };
                }
                const resultContentType = result.headers.get('Content-Type');
                // Will receive xml when get object met error
                if (resultContentType === 'text/xml' || resultContentType === 'application/xml') {
                    const xmlText = yield result.text();
                    const xml = yield new window.DOMParser().parseFromString(xmlText, 'text/xml');
                    return {
                        code: -1,
                        xml,
                        message: 'Get create object approval error.',
                        statusCode: status,
                    };
                }
                const signedMsgString = result.headers.get('X-Gnfd-Signed-Msg') || '';
                const signedMsg = decodeObjectFromHexString(signedMsgString);
                return {
                    code: 0,
                    message: 'Get create object approval success.',
                    body: (_a = result.headers.get('X-Gnfd-Signed-Msg')) !== null && _a !== void 0 ? _a : '',
                    statusCode: status,
                    signedMsg,
                };
            }
            catch (error) {
                return { code: -1, message: error.message, statusCode: NORMAL_ERROR_CODE };
            }
        });
    }
    createObjectTx(msg, signedMsg) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.basic.tx(MsgCreateObjectTypeUrl, msg.creator, MsgCreateObjectSDKTypeEIP712, Object.assign(Object.assign({}, signedMsg), { type: MsgCreateObjectTypeUrl, visibility: signedMsg.visibility, primary_sp_approval: {
                    expired_height: signedMsg.primary_sp_approval.expired_height,
                    sig: signedMsg.primary_sp_approval.sig,
                }, redundancy_type: signedMsg.redundancy_type, payload_size: signedMsg.payload_size }), tx$4.MsgCreateObject.encode(msg).finish());
        });
    }
    createObject(getApprovalParams) {
        return __awaiter(this, void 0, void 0, function* () {
            const { signedMsg } = yield this.getCreateObjectApproval(getApprovalParams);
            if (!signedMsg) {
                throw new Error('Get create object approval error');
            }
            const msg = {
                bucketName: signedMsg.bucket_name,
                creator: signedMsg.creator,
                objectName: signedMsg.object_name,
                contentType: signedMsg.content_type,
                payloadSize: Long__default["default"].fromString(signedMsg.payload_size),
                visibility: common.visibilityTypeFromJSON(signedMsg.visibility),
                expectChecksums: signedMsg.expect_checksums.map((e) => helpers.bytesFromBase64(e)),
                expectSecondarySpAddresses: signedMsg.expect_secondary_sp_addresses,
                redundancyType: signedMsg.redundancy_type === undefined
                    ? common.redundancyTypeFromJSON(0)
                    : common.redundancyTypeFromJSON(signedMsg.redundancy_type),
                primarySpApproval: {
                    expiredHeight: Long__default["default"].fromString(signedMsg.primary_sp_approval.expired_height),
                    sig: helpers.bytesFromBase64(signedMsg.primary_sp_approval.sig),
                },
            };
            return yield this.createObjectTx(msg, signedMsg);
        });
    }
    uploadObject(configParam) {
        return __awaiter(this, void 0, void 0, function* () {
            const { bucketName, objectName, txnHash, body, endpoint, duration = 30000 } = configParam;
            if (!isValidBucketName(bucketName)) ;
            if (!isValidUrl(endpoint)) {
                throw new Error('Invalid endpoint');
            }
            if (!isValidObjectName(objectName)) ;
            if (!txnHash) {
                throw new Error('Transaction hash is empty, please check.');
            }
            const url = generateUrlByBucketName(endpoint, bucketName) + '/' + objectName;
            // todo generate real signature
            const signature = MOCK_SIGNATURE;
            const headers = new Headers({
                // todo place the correct authorization string
                Authorization: `authTypeV2 ECDSA-secp256k1, Signature=${signature}`,
                'X-Gnfd-Txn-hash': txnHash,
            });
            try {
                const result = yield fetchWithTimeout(url, {
                    headers,
                    method: METHOD_PUT,
                    body,
                }, duration);
                const { status } = result;
                if (!result.ok) {
                    return { code: -1, message: 'Put object error.', statusCode: status };
                }
                const resultContentType = result.headers.get('Content-Type');
                // Will receive xml when put object met error
                if (resultContentType === 'text/xml' || resultContentType === 'application/xml') {
                    const xmlText = yield result.text();
                    const xml = yield new window.DOMParser().parseFromString(xmlText, 'text/xml');
                    return { code: -1, message: 'Put object error.', xml, statusCode: status };
                }
                return { code: 0, message: 'Put object success.', statusCode: status };
            }
            catch (error) {
                return { code: -1, message: error.message, statusCode: NORMAL_ERROR_CODE };
            }
        });
    }
    cancelCreateObject(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.basic.tx(MsgCancelCreateObjectTypeUrl, msg.operator, MsgCancelCreateObjectSDKTypeEIP712, tx$4.MsgCancelCreateObject.toSDK(msg), tx$4.MsgCancelCreateObject.encode(msg).finish());
        });
    }
    deleteObject(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.basic.tx(MsgDeleteObjectTypeUrl, msg.operator, MsgDeleteObjectSDKTypeEIP712, tx$4.MsgDeleteObject.toSDK(msg), tx$4.MsgDeleteObject.encode(msg).finish());
        });
    }
    headObject(bucketName, objectName) {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getStorageQueryClient();
            return rpc.HeadObject({
                bucketName,
                objectName,
            });
        });
    }
    headObjectById(objectId) {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getStorageQueryClient();
            return rpc.HeadObjectById({
                objectId,
            });
        });
    }
    getObject(configParam) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { bucketName, objectName, endpoint, duration = 30000 } = configParam;
                // todo generate real signature
                const signature = MOCK_SIGNATURE;
                if (!isValidUrl(endpoint)) {
                    throw new Error('Invalid endpoint');
                }
                if (!isValidBucketName(bucketName)) ;
                if (!isValidObjectName(objectName)) ;
                const url = generateUrlByBucketName(endpoint, bucketName) + '/' + objectName;
                const headers = new Headers({
                    Authorization: `authTypeV2 ECDSA-secp256k1, Signature=${signature}`,
                });
                const result = yield fetchWithTimeout(url, {
                    headers,
                    method: METHOD_GET,
                }, duration);
                const { status } = result;
                if (!result.ok) {
                    return { code: -1, message: 'Get object error.', statusCode: status };
                }
                const resultContentType = result.headers.get('Content-Type');
                // Will receive xml when get object met error
                if (resultContentType === 'text/xml' || resultContentType === 'application/xml') {
                    const xmlText = yield result.text();
                    const xml = yield new window.DOMParser().parseFromString(xmlText, 'text/xml');
                    return {
                        code: -1,
                        xml,
                        message: 'Get object error.',
                        statusCode: status,
                    };
                }
                const fileBlob = yield result.blob();
                return {
                    code: 0,
                    body: fileBlob,
                    message: 'Get object success.',
                    statusCode: status,
                };
            }
            catch (error) {
                return { code: -1, message: error.message, statusCode: NORMAL_ERROR_CODE };
            }
        });
    }
    downloadFile(configParam) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { objectName } = configParam;
                const getObjectResult = yield this.getObject(configParam);
                if (getObjectResult.code !== 0) {
                    throw new Error(getObjectResult.message);
                }
                const file = getObjectResult === null || getObjectResult === void 0 ? void 0 : getObjectResult.body;
                if (file) {
                    // const {file} = getObjectResult;
                    const fileURL = URL.createObjectURL(file);
                    // create <a> tag dynamically
                    const fileLink = document.createElement('a');
                    fileLink.href = fileURL;
                    // it forces the name of the downloaded file
                    fileLink.download = objectName;
                    // triggers the click event
                    fileLink.click();
                }
                return;
            }
            catch (error) {
                throw new Error(error);
            }
        });
    }
    listObjects(configParam) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { bucketName, endpoint, duration = 30000 } = configParam;
                if (!isValidBucketName(bucketName)) ;
                if (!isValidUrl(endpoint)) {
                    throw new Error('Invalid endpoint');
                }
                const url = generateUrlByBucketName(endpoint, bucketName);
                const signature = MOCK_SIGNATURE;
                const headers = new Headers({
                    // todo place the correct authorization string
                    Authorization: `authTypeV2 ECDSA-secp256k1, Signature=${signature}`,
                });
                const result = yield fetchWithTimeout(url, {
                    headers,
                    method: METHOD_GET,
                }, duration);
                const { status } = result;
                if (!result.ok) {
                    return { code: -1, message: 'List object error.', statusCode: status };
                }
                const { objects } = yield result.json();
                return {
                    code: 0,
                    message: 'List object success.',
                    statusCode: status,
                    body: objects,
                };
            }
            catch (error) {
                return { code: -1, message: error.message, statusCode: NORMAL_ERROR_CODE };
            }
        });
    }
    createFolder(getApprovalParams) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!getApprovalParams.objectName.endsWith('/')) {
                throw new Error('failed to create folder. Folder names must end with a forward slash (/) character');
            }
            return this.createObject(getApprovalParams);
        });
    }
};
Objectt = __decorate([
    tsyringe.singleton()
], Objectt);

const MsgDepositSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'authority',
        },
        {
            type: 'TypeParams',
            name: 'params',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'to',
        },
        {
            type: 'string',
            name: 'amount',
        },
    ],
    TypeParams: [
        {
            type: 'uint64',
            name: 'reserve_time',
        },
        {
            type: 'uint64',
            name: 'payment_account_count_limit',
        },
        {
            type: 'uint64',
            name: 'forced_settle_time',
        },
        {
            type: 'uint64',
            name: 'max_auto_force_settle_num',
        },
        {
            type: 'string',
            name: 'fee_denom',
        },
        {
            type: 'string',
            name: 'validator_tax_rate',
        },
    ],
};

const MsgDisableRefundSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'authority',
        },
        {
            type: 'TypeParams',
            name: 'params',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'to',
        },
        {
            type: 'string',
            name: 'amount',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'from',
        },
        {
            type: 'string',
            name: 'amount',
        },
        {
            type: 'string',
            name: 'owner',
        },
        {
            type: 'string',
            name: 'addr',
        },
    ],
    TypeParams: [
        {
            type: 'uint64',
            name: 'reserve_time',
        },
        {
            type: 'uint64',
            name: 'payment_account_count_limit',
        },
        {
            type: 'uint64',
            name: 'forced_settle_time',
        },
        {
            type: 'uint64',
            name: 'max_auto_force_settle_num',
        },
        {
            type: 'string',
            name: 'fee_denom',
        },
        {
            type: 'string',
            name: 'validator_tax_rate',
        },
    ],
};

const MsgWithdrawSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'authority',
        },
        {
            type: 'TypeParams',
            name: 'params',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'to',
        },
        {
            type: 'string',
            name: 'amount',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'from',
        },
        {
            type: 'string',
            name: 'amount',
        },
    ],
    TypeParams: [
        {
            type: 'uint64',
            name: 'reserve_time',
        },
        {
            type: 'uint64',
            name: 'payment_account_count_limit',
        },
        {
            type: 'uint64',
            name: 'forced_settle_time',
        },
        {
            type: 'uint64',
            name: 'max_auto_force_settle_num',
        },
        {
            type: 'string',
            name: 'fee_denom',
        },
        {
            type: 'string',
            name: 'validator_tax_rate',
        },
    ],
};

let Payment = class Payment {
    constructor() {
        this.basic = tsyringe.container.resolve(Basic);
        this.queryClient = tsyringe.container.resolve(RpcQueryClient);
    }
    getStreamRecord(account) {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getPaymentQueryClient();
            return yield rpc.StreamRecord({
                account,
            });
        });
    }
    params() {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getPaymentQueryClient();
            return yield rpc.Params();
        });
    }
    deposit(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.basic.tx('/greenfield.payment.MsgDeposit', msg.creator, MsgDepositSDKTypeEIP712, tx$3.MsgDeposit.toSDK(msg), tx$3.MsgDeposit.encode(msg).finish());
        });
    }
    withdraw(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.basic.tx('/greenfield.payment.MsgWithdraw', msg.creator, MsgWithdrawSDKTypeEIP712, tx$3.MsgWithdraw.toSDK(msg), tx$3.MsgWithdraw.encode(msg).finish());
        });
    }
    disableRefund(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.basic.tx('/greenfield.payment.MsgDisableRefund', msg.addr, MsgDisableRefundSDKTypeEIP712, tx$3.MsgDisableRefund.toSDK(msg), tx$3.MsgDisableRefund.encode(msg).finish());
        });
    }
};
Payment = __decorate([
    tsyringe.singleton()
], Payment);

const MsgUpdateSpStoragePriceSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'TypeDescription',
            name: 'description',
        },
        {
            type: 'string',
            name: 'sp_address',
        },
        {
            type: 'string',
            name: 'funding_address',
        },
        {
            type: 'string',
            name: 'seal_address',
        },
        {
            type: 'string',
            name: 'approval_address',
        },
        {
            type: 'string',
            name: 'gc_address',
        },
        {
            type: 'string',
            name: 'endpoint',
        },
        {
            type: 'TypeAmount',
            name: 'deposit',
        },
        {
            type: 'string',
            name: 'read_price',
        },
        {
            type: 'uint64',
            name: 'free_read_quota',
        },
        {
            type: 'string',
            name: 'store_price',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'sp_address',
        },
        {
            type: 'TypeAmount',
            name: 'deposit',
        },
        {
            type: 'string',
            name: 'sp_address',
        },
        {
            type: 'string',
            name: 'endpoint',
        },
        {
            type: 'TypeDescription',
            name: 'description',
        },
        {
            type: 'string',
            name: 'seal_address',
        },
        {
            type: 'string',
            name: 'approval_address',
        },
        {
            type: 'string',
            name: 'gc_address',
        },
        {
            type: 'string',
            name: 'sp_address',
        },
        {
            type: 'string',
            name: 'read_price',
        },
        {
            type: 'uint64',
            name: 'free_read_quota',
        },
        {
            type: 'string',
            name: 'store_price',
        },
    ],
    TypeDescription: [
        {
            type: 'string',
            name: 'moniker',
        },
        {
            type: 'string',
            name: 'identity',
        },
        {
            type: 'string',
            name: 'website',
        },
        {
            type: 'string',
            name: 'security_contact',
        },
        {
            type: 'string',
            name: 'details',
        },
    ],
};

let Sp = class Sp {
    constructor(basic) {
        this.basic = basic;
        this.queryClient = tsyringe.container.resolve(RpcQueryClient);
    }
    getStorageProviders() {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getSpQueryClient();
            const res = yield rpc.StorageProviders();
            return res.sps;
        });
    }
    getStorageProviderInfo(spAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getSpQueryClient();
            const res = yield rpc.StorageProvider({
                spAddress,
            });
            return res.storageProvider;
        });
    }
    getStoragePriceByTime(spAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getSpQueryClient();
            const res = yield rpc.QueryGetSpStoragePriceByTime({
                timestamp: Long__default["default"].fromNumber(0),
                spAddr: spAddress,
            });
            return res.spStoragePrice;
        });
    }
    getSecondarySpStorePrice() {
        return __awaiter(this, void 0, void 0, function* () {
            const rpc = yield this.queryClient.getSpQueryClient();
            const res = yield rpc.QueryGetSecondarySpStorePriceByTime({
                timestamp: Long__default["default"].fromNumber(0),
            });
            return res.secondarySpStorePrice;
        });
    }
    updateSpStoragePrice(address, msg) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.basic.tx('/greenfield.sp.MsgUpdateSpStoragePrice', address, MsgUpdateSpStoragePriceSDKTypeEIP712, tx$9.MsgUpdateSpStoragePrice.toSDK(msg), tx$9.MsgUpdateSpStoragePrice.encode(msg).finish());
        });
    }
};
Sp = __decorate([
    tsyringe.singleton(),
    __param(0, tsyringe.inject(tsyringe.delay(() => Basic))),
    __metadata("design:paramtypes", [Basic])
], Sp);

var Client_1;
exports.Client = Client_1 = class Client {
    static create(rpcUrl, chainId) {
        tsyringe.container.register('RPC_URL', { useValue: rpcUrl });
        tsyringe.container.register('CHAIN_ID', { useValue: chainId });
        const account = tsyringe.container.resolve(Account);
        const bucket = tsyringe.container.resolve(Bucket);
        const challenge = tsyringe.container.resolve(Challenge);
        const crosschain = tsyringe.container.resolve(CrossChain);
        const distribution = tsyringe.container.resolve(Distribution);
        const feegrant = tsyringe.container.resolve(FeeGrant);
        const group = tsyringe.container.resolve(Group);
        const objectt = tsyringe.container.resolve(Objectt);
        const payment = tsyringe.container.resolve(Payment);
        const sp = tsyringe.container.resolve(Sp);
        return new Client_1(account, bucket, challenge, crosschain, distribution, feegrant, group, objectt, payment, sp);
    }
    constructor(account, bucket, challenge, crosschain, distribution, feegrant, group, object, payment, sp) {
        this.account = account;
        this.bucket = bucket;
        this.challenge = challenge;
        this.crosschain = crosschain;
        this.distribution = distribution;
        this.feegrant = feegrant;
        this.group = group;
        this.object = object;
        this.payment = payment;
        this.sp = sp;
    }
};
exports.Client = Client_1 = __decorate([
    tsyringe.injectable(),
    __metadata("design:paramtypes", [Object, Object, Object, Object, Object, Object, Object, Object, Object, Object])
], exports.Client);

const BucketTypeAbbr = 'b';
const ObjectTypeAbbr = 'o';
const GroupTypeAbbr = 'g';
const newBucketGRN = (bucketName) => {
    return {
        resType: types.ResourceType.RESOURCE_TYPE_BUCKET,
        groupOwner: '',
        name: bucketName,
    };
};
const newObjectGRN = (owner, groupName) => {
    return {
        resType: types.ResourceType.RESOURCE_TYPE_GROUP,
        groupOwner: owner,
        name: groupName,
    };
};
const GRNToString = (grn) => {
    let res = '';
    switch (grn.resType) {
        case types.ResourceType.RESOURCE_TYPE_BUCKET:
            res = `grn:${BucketTypeAbbr}::${grn.name}`;
            break;
        case types.ResourceType.RESOURCE_TYPE_OBJECT:
            res = `grn:${ObjectTypeAbbr}::${grn.name}`;
            break;
        case types.ResourceType.RESOURCE_TYPE_GROUP:
            res = `grn:${GroupTypeAbbr}:${grn.groupOwner}:${grn.name}`;
            break;
        default:
            return '';
    }
    return res.trim();
};

exports.StorageEnums = common__namespace;
Object.defineProperty(exports, 'Long', {
    enumerable: true,
    get: function () { return Long__default["default"]; }
});
exports.DEFAULT_DENOM = DEFAULT_DENOM;
exports.GRNToString = GRNToString;
exports.ZERO_PUBKEY = ZERO_PUBKEY;
exports.decodeFromHex = decodeFromHex;
exports.decodeObjectFromHexString = decodeObjectFromHexString;
exports.eip712Hash = eip712Hash;
exports.encodeObjectToHexString = encodeObjectToHexString;
exports.encodeToHex = encodeToHex;
exports.encodeToHexString = encodeToHexString;
exports.generateUrlByBucketName = generateUrlByBucketName;
exports.getGasFeeBySimulate = getGasFeeBySimulate;
exports.isValidAddress = isValidAddress;
exports.isValidBucketName = isValidBucketName;
exports.isValidObjectName = isValidObjectName;
exports.isValidUrl = isValidUrl;
exports.makeCosmsPubKey = makeCosmsPubKey;
exports.newBucketGRN = newBucketGRN;
exports.newObjectGRN = newObjectGRN;
exports.recoverPk = recoverPk;
exports.sign712Tx = sign712Tx;
exports.trimString = trimString;
