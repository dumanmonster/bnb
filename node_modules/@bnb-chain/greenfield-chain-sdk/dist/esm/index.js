import 'reflect-metadata';
import { singleton, inject, container, delay, injectable } from 'tsyringe';
import { BaseAccount } from '@bnb-chain/greenfield-cosmos-types/cosmos/auth/v1beta1/auth';
import { MsgMultiSend, MsgSend } from '@bnb-chain/greenfield-cosmos-types/cosmos/bank/v1beta1/tx';
import { MsgCreatePaymentAccount, MsgDeposit, MsgWithdraw, MsgDisableRefund } from '@bnb-chain/greenfield-cosmos-types/greenfield/payment/tx';
import { toBuffer, bufferToHex } from '@ethereumjs/util';
import { signTypedData, SignTypedDataVersion, TypedDataUtils } from '@metamask/eth-sig-util';
import { publicKeyCreate } from 'ethereum-cryptography/secp256k1-compat';
import { PubKey } from '@bnb-chain/greenfield-cosmos-types/cosmos/crypto/secp256k1/keys';
import { recoverPublicKey, computePublicKey } from '@ethersproject/signing-key';
import { visibilityTypeFromJSON, redundancyTypeFromJSON } from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/common';
import * as common from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/common';
export { common as StorageEnums };
import Long from 'long';
export { default as Long } from 'long';
import { ResourceType } from '@bnb-chain/greenfield-cosmos-types/greenfield/resource/types';
import { formatEther } from '@ethersproject/units';
import { ServiceClientImpl } from '@bnb-chain/greenfield-cosmos-types/cosmos/base/tendermint/v1beta1/query';
import { ServiceClientImpl as ServiceClientImpl$1, SimulateRequest } from '@bnb-chain/greenfield-cosmos-types/cosmos/tx/v1beta1/service';
import { Tx, AuthInfo, TxBody, TxRaw } from '@bnb-chain/greenfield-cosmos-types/cosmos/tx/v1beta1/tx';
import { Any } from '@bnb-chain/greenfield-cosmos-types/google/protobuf/any';
import { makeAuthInfoBytes } from '@cosmjs/proto-signing';
import { QueryClient, setupAuthExtension, setupAuthzExtension, setupBankExtension, setupDistributionExtension, setupFeegrantExtension, setupGovExtension, setupIbcExtension, setupMintExtension, setupSlashingExtension, setupStakingExtension, setupTxExtension, createProtobufRpcClient, StargateClient } from '@cosmjs/stargate';
import { Tendermint37Client } from '@cosmjs/tendermint-rpc';
import { MsgClientImpl } from '@bnb-chain/greenfield-cosmos-types/cosmos/distribution/v1beta1/tx';
import { QueryClientImpl } from '@bnb-chain/greenfield-cosmos-types/cosmos/auth/v1beta1/query';
import { QueryClientImpl as QueryClientImpl$1 } from '@bnb-chain/greenfield-cosmos-types/cosmos/bank/v1beta1/query';
import { QueryClientImpl as QueryClientImpl$6 } from '@bnb-chain/greenfield-cosmos-types/cosmos/crosschain/v1/query';
import { QueryClientImpl as QueryClientImpl$9 } from '@bnb-chain/greenfield-cosmos-types/cosmos/feegrant/v1beta1/query';
import { QueryClientImpl as QueryClientImpl$7 } from '@bnb-chain/greenfield-cosmos-types/cosmos/oracle/v1/query';
import { QueryClientImpl as QueryClientImpl$8 } from '@bnb-chain/greenfield-cosmos-types/greenfield/bridge/query';
import { QueryClientImpl as QueryClientImpl$5 } from '@bnb-chain/greenfield-cosmos-types/greenfield/challenge/query';
import { QueryClientImpl as QueryClientImpl$2 } from '@bnb-chain/greenfield-cosmos-types/greenfield/payment/query';
import { QueryClientImpl as QueryClientImpl$4 } from '@bnb-chain/greenfield-cosmos-types/greenfield/sp/query';
import { QueryClientImpl as QueryClientImpl$3 } from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/query';
import { MsgCreateBucket, MsgDeleteBucket, MsgUpdateBucketInfo, MsgPutPolicy, MsgDeletePolicy, MsgMirrorGroup, MsgMirrorBucket, MsgMirrorObject, MsgCreateGroup, MsgDeleteGroup, MsgUpdateGroupMember, MsgLeaveGroup, MsgCreateObject, MsgCancelCreateObject, MsgDeleteObject } from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/tx';
import { bytesFromBase64 } from '@bnb-chain/greenfield-cosmos-types/helpers';
import { MsgSubmit, MsgAttest } from '@bnb-chain/greenfield-cosmos-types/greenfield/challenge/tx';
import { MsgClaim } from '@bnb-chain/greenfield-cosmos-types/cosmos/oracle/v1/tx';
import { MsgTransferOut } from '@bnb-chain/greenfield-cosmos-types/greenfield/bridge/tx';
import { MsgGrantAllowance, MsgRevokeAllowance } from '@bnb-chain/greenfield-cosmos-types/cosmos/feegrant/v1beta1/tx';
import { FileHandler } from '@bnb-chain/greenfiled-file-handle';
import { MsgUpdateSpStoragePrice } from '@bnb-chain/greenfield-cosmos-types/greenfield/sp/tx';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

const MsgMultiSendTypeUrl = '/cosmos.bank.v1beta1.MsgMulti';
const MsgMultiSendSDKTypeEIP712 = {
    Msg: [
        { name: 'type', type: 'string' },
        { name: 'from_address', type: 'string' },
        { name: 'to_address', type: 'string' },
        { name: 'amount', type: 'TypeAmount[]' },
    ],
};

const MsgSendTypeUrl = '/cosmos.bank.v1beta1.MsgSend';
const MsgSendSDKTypeEIP712 = {
    Msg: [
        { name: 'type', type: 'string' },
        { name: 'from_address', type: 'string' },
        { name: 'to_address', type: 'string' },
        { name: 'amount', type: 'TypeAmount[]' },
    ],
};

const MsgCreatePaymentAccountTypeUrl = '/greenfield.payment';
const MsgCreatePaymentAccountSDKTypeEIP712 = {
    Msg: [
        {
            name: 'type',
            type: 'string',
        },
        {
            name: 'creaator',
            type: 'string',
        },
    ],
};

const createEIP712 = (types, chainId, message) => {
    return {
        types,
        primaryType: 'Tx',
        domain: {
            name: 'Greenfield Tx',
            version: '1.0.0',
            chainId,
            verifyingContract: 'greenfield',
            salt: '0',
        },
        message,
    };
};
const generateMessage = (accountNumber, sequence, chainCosmosId, memo, fee, msg, timeoutHeight) => {
    return {
        account_number: accountNumber,
        chain_id: chainCosmosId,
        sequence,
        memo,
        fee,
        msg,
        timeout_height: timeoutHeight,
    };
};
const generateTypes = (newTypes) => {
    const types = {
        Coin: [
            { name: 'denom', type: 'string' },
            { name: 'amount', type: 'uint256' },
        ],
        EIP712Domain: [
            { name: 'name', type: 'string' },
            { name: 'version', type: 'string' },
            { name: 'chainId', type: 'uint256' },
            { name: 'verifyingContract', type: 'string' },
            { name: 'salt', type: 'string' },
        ],
        Tx: [
            { name: 'account_number', type: 'uint256' },
            { name: 'chain_id', type: 'uint256' },
            { name: 'fee', type: 'Fee' },
            { name: 'memo', type: 'string' },
            { name: 'msg', type: 'Msg' },
            { name: 'sequence', type: 'uint256' },
            { name: 'timeout_height', type: 'uint256' },
        ],
        Fee: [
            { name: 'amount', type: 'Coin[]' },
            { name: 'gas_limit', type: 'uint256' },
            { name: 'payer', type: 'string' },
            { name: 'granter', type: 'string' },
        ],
        TypeAmount: [
            { name: 'denom', type: 'string' },
            { name: 'amount', type: 'string' },
        ],
    };
    Object.assign(types, newTypes);
    return types;
};
const generateFee = (amount, denom, gas_limit, payer, granter) => {
    return {
        amount: [
            {
                amount,
                denom,
            },
        ],
        gas_limit,
        payer,
        granter,
    };
};

const typeWrapper = (type, msg) => {
    return {
        ...msg,
        type,
    };
};

/**
 * @priKey 0x prefix
 */
const getPubKeyByPriKey = (priKey) => {
    const privateKeyBytes = toBuffer(priKey);
    const publicKeyBytes = publicKeyCreate(privateKeyBytes);
    const pk = bufferToHex(toBuffer(publicKeyBytes));
    const pubKey = makeCosmsPubKey(pk);
    return pubKey;
};
const createEIP712Data = (chainId, accountNumber, sequence, typeUrl, MsgSDKTypeEIP712, MsgSDK, txOption) => {
    const { gasLimit, gasPrice, denom, payer } = txOption;
    const fee = generateFee(String(BigInt(gasLimit) * BigInt(gasPrice)), denom, String(gasLimit), payer, '');
    const wrapperTypes = generateTypes(MsgSDKTypeEIP712);
    const wrapperMsg = typeWrapper(typeUrl, MsgSDK);
    const messages = generateMessage(accountNumber, sequence, chainId, '', fee, wrapperMsg, '0');
    return createEIP712(wrapperTypes, chainId, messages);
};
const signEIP712Data = (chainId, accountNumber, sequence, typeUrl, MsgSDKTypeEIP712, MsgSDK, txOption) => {
    const data = createEIP712Data(chainId, accountNumber, sequence, typeUrl, MsgSDKTypeEIP712, MsgSDK, txOption);
    if (!txOption.privateKey) {
        throw new Error('private key is required');
    }
    return signTypedData({
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        data,
        version: SignTypedDataVersion.V4,
        privateKey: toBuffer(txOption.privateKey),
    });
};

/**
 * recover public key from signature
 *
 * @messageHash message hash
 * @signature message signature
 *
 * @returns uncompressed public key
 */
const recoverPk = ({ messageHash, signature }) => {
    const uncompressedPubKey = recoverPublicKey(messageHash, signature);
    return computePublicKey(uncompressedPubKey, true);
};
/**
 * @pk compressed public key from signature
 * @return eg. { typeUrl: '/ethermint.crypto.v1.ethsecp256k1.PubKey', value: 'CiEC+hp2uVKio9T7x0goOPyHgwUYiRsZ8MeYUrfRX8MxrzM=' }
 */
const makeCosmsPubKey = (pk) => {
    const pubKey = PubKey.fromPartial({
        key: toBuffer(pk),
    });
    return {
        typeUrl: '/cosmos.crypto.eth.ethsecp256k1.PubKey',
        value: PubKey.encode(pubKey).finish(),
    };
};
const eip712Hash = (message) => {
    return TypedDataUtils.eip712Hash(JSON.parse(message), SignTypedDataVersion.V4);
};

/**
 * @addr wallet address
 * @message sign typed v4 data
 */
const sign712Tx = async (addr, message) => {
    // TODO: eth-sig-utils
    /* eslint-disable @typescript-eslint/no-explicit-any */
    const signature = await window.ethereum?.request({
        method: 'eth_signTypedData_v4',
        params: [addr, message],
    });
    const messageHash = eip712Hash(message);
    return {
        signature,
        messageHash,
    };
};
const defaultSignTypedData = async (addr, message) => {
    const signature = await window.ethereum?.request({
        method: 'eth_signTypedData_v4',
        params: [addr, message],
    });
    return signature;
};

const getGasFeeBySimulate = (simulateTxInfo, denom = 'BNB') => {
    if (!simulateTxInfo.gasInfo)
        throw new Error('gasInfo not found');
    const gasLimit = BigInt(simulateTxInfo.gasInfo?.gasUsed.toNumber());
    const gasPrice = simulateTxInfo.gasInfo?.minGasPrice.replace(denom, '');
    const gasFee = gasLimit * BigInt(gasPrice);
    return {
        gasLimit,
        gasPrice,
        gasFee: formatEther(String(gasFee)),
    };
};

const ZERO_PUBKEY = '0x000000000000000000000000000000000000000000000000000000000000000000';
const DEFAULT_DENOM = ' BNB';

let RpcQueryClient = class RpcQueryClient {
    constructor(rpcUrl) {
        this.rpcUrl = rpcUrl;
        this.rpcClient = null;
        this.txQueryClient = null;
        this.rpcUrl = rpcUrl;
    }
    async getRpcClient() {
        if (!this.rpcClient) {
            this.rpcClient = await makeRpcClient(this.rpcUrl);
        }
        return this.rpcClient;
    }
    async getQueryClient() {
        if (!this.txQueryClient) {
            const [client] = await makeClientWithExtension(this.rpcUrl);
            this.txQueryClient = client;
        }
        return this.txQueryClient;
    }
    async getAuthQueryClient() {
        const rpcClient = await this.getRpcClient();
        return new QueryClientImpl(rpcClient);
    }
    async getBankQueryClient() {
        const rpcClient = await this.getRpcClient();
        return new QueryClientImpl$1(rpcClient);
    }
    async getPaymentQueryClient() {
        const rpcClient = await this.getRpcClient();
        return new QueryClientImpl$2(rpcClient);
    }
    async getBucketQueryClient() {
        const rpcClient = await this.getRpcClient();
        return new QueryClientImpl$3(rpcClient);
    }
    async getSpQueryClient() {
        const rpcClient = await this.getRpcClient();
        return new QueryClientImpl$4(rpcClient);
    }
    async getChallengeQueryClient() {
        const rpcClient = await this.getRpcClient();
        return new QueryClientImpl$5(rpcClient);
    }
    async getCrosschainQueryClient() {
        const rpcClient = await this.getRpcClient();
        return new QueryClientImpl$6(rpcClient);
    }
    async getOracleQueryClient() {
        const rpcClient = await this.getRpcClient();
        return new QueryClientImpl$7(rpcClient);
    }
    async getBridgeQueryClient() {
        const rpcClient = await this.getRpcClient();
        return new QueryClientImpl$8(rpcClient);
    }
    async getFeeGrantQueryClient() {
        const rpcClient = await this.getRpcClient();
        return new QueryClientImpl$9(rpcClient);
    }
    async getStorageQueryClient() {
        const rpcClient = await this.getRpcClient();
        return new QueryClientImpl$3(rpcClient);
    }
    async getMsgClient() {
        const rpcClient = await this.getRpcClient();
        return new MsgClientImpl(rpcClient);
    }
};
RpcQueryClient = __decorate([
    singleton(),
    __param(0, inject('RPC_URL')),
    __metadata("design:paramtypes", [String])
], RpcQueryClient);
const makeClientWithExtension = async (rpcUrl) => {
    const tmClient = await Tendermint37Client.connect(rpcUrl);
    return [
        QueryClient.withExtensions(tmClient, setupAuthExtension, setupAuthzExtension, setupBankExtension, setupDistributionExtension, setupFeegrantExtension, setupGovExtension, setupIbcExtension, setupMintExtension, setupSlashingExtension, setupStakingExtension, setupTxExtension),
        tmClient,
    ];
};
const makeRpcClient = async (rpcUrl) => {
    const [, tmClient] = await makeClientWithExtension(rpcUrl);
    const rpc = createProtobufRpcClient(new QueryClient(tmClient));
    return rpc;
};

let Basic = class Basic {
    constructor(rpcUrl, chainId) {
        this.account = container.resolve(Account);
        this.rpcQueryClient = container.resolve(RpcQueryClient);
        this.rpcUrl = rpcUrl;
        this.chainId = chainId;
    }
    async getNodeInfo() {
        const rpcClient = await this.rpcQueryClient.getRpcClient();
        const rpc = new ServiceClientImpl(rpcClient);
        return await rpc.GetNodeInfo();
    }
    async getLatestBlock() {
        const rpcClient = await this.rpcQueryClient.getRpcClient();
        const rpc = new ServiceClientImpl(rpcClient);
        return await rpc.GetLatestBlock();
    }
    async getLatestBlockHeight() {
        const latestBlock = await this.getLatestBlock();
        const height = latestBlock.sdkBlock?.header?.height;
        if (!height)
            return 0;
        return height.toNumber();
    }
    async getSyncing() {
        const rpcClient = await this.rpcQueryClient.getRpcClient();
        const rpc = new ServiceClientImpl(rpcClient);
        const syncing = await rpc.GetSyncing();
        return syncing.syncing;
    }
    async getBlockByHeight(height) {
        const rpcClient = await this.rpcQueryClient.getRpcClient();
        const rpc = new ServiceClientImpl(rpcClient);
        return await rpc.GetBlockByHeight({
            height: Long.fromInt(height),
        });
    }
    async GetLatestValidatorSet(request) {
        const rpcClient = await this.rpcQueryClient.getRpcClient();
        const rpc = new ServiceClientImpl(rpcClient);
        const validatorSet = await rpc.GetLatestValidatorSet(request);
        return validatorSet.blockHeight.toNumber();
    }
    async tx(typeUrl, address, MsgSDKTypeEIP712, MsgSDK, msgBytes) {
        const accountInfo = await this.account.getAccount(address);
        const bodyBytes = this.getBodyBytes(typeUrl, msgBytes);
        return {
            simulate: async (opts) => {
                return await this.simulateRawTx(bodyBytes, accountInfo, opts);
            },
            broadcast: async (opts) => {
                const rawTxBytes = await this.getRawTxBytes(typeUrl, MsgSDKTypeEIP712, MsgSDK, bodyBytes, accountInfo, opts);
                return await this.broadcastRawTx(rawTxBytes);
            },
        };
    }
    async simulateRawTx(txBodyBytes, accountInfo, options) {
        const rpcClient = await this.rpcQueryClient.getRpcClient();
        const rpc = new ServiceClientImpl$1(rpcClient);
        const { denom } = options;
        const authInfoBytes = this.getAuthInfoBytes({
            sequence: accountInfo.sequence + '',
            denom,
            gasLimit: 0,
            gasPrice: '0',
            pubKey: makeCosmsPubKey(ZERO_PUBKEY),
        });
        const tx = Tx.fromPartial({
            authInfo: AuthInfo.decode(authInfoBytes),
            body: TxBody.decode(txBodyBytes),
            signatures: [Uint8Array.from([])],
        });
        const request = SimulateRequest.fromPartial({
            txBytes: Tx.encode(tx).finish(),
        });
        const res = await rpc.Simulate(request);
        return getGasFeeBySimulate(res, denom);
    }
    async broadcastRawTx(txRawBytes) {
        const tmClient = await Tendermint37Client.connect(this.rpcUrl);
        const client = await StargateClient.create(tmClient);
        return await client.broadcastTx(txRawBytes);
    }
    getAuthInfoBytes(params) {
        const { pubKey, denom = DEFAULT_DENOM, sequence, gasLimit, gasPrice } = params;
        if (!pubKey)
            throw new Error('pubKey is required');
        const feeAmount = [
            {
                denom,
                amount: String(BigInt(gasLimit) * BigInt(gasPrice)),
            },
        ];
        const feeGranter = undefined;
        const feePayer = undefined;
        const authInfoBytes = makeAuthInfoBytes([{ pubkey: pubKey, sequence: Number(sequence) }], feeAmount, gasLimit, feeGranter, feePayer, 712);
        return authInfoBytes;
    }
    async getRawTxBytes(typeUrl, msgEIP712Structor, msgEIP712, bodyBytes, accountInfo, txOption) {
        const { denom, gasLimit, gasPrice, privateKey, signTypedDataCallback = defaultSignTypedData, } = txOption;
        const eip712 = this.getEIP712Struct(typeUrl, msgEIP712Structor, accountInfo.accountNumber + '', accountInfo.sequence + '', this.chainId, msgEIP712, txOption);
        let signature, pubKey = undefined;
        if (privateKey) {
            pubKey = getPubKeyByPriKey(privateKey);
            signature = signEIP712Data(this.chainId, accountInfo.accountNumber + '', accountInfo.sequence + '', typeUrl, msgEIP712Structor, msgEIP712, txOption);
        }
        else {
            signature = await signTypedDataCallback(accountInfo.address, JSON.stringify(eip712));
            const messageHash = eip712Hash(JSON.stringify(eip712));
            const pk = recoverPk({
                signature,
                messageHash,
            });
            pubKey = makeCosmsPubKey(pk);
        }
        const authInfoBytes = this.getAuthInfoBytes({
            denom,
            sequence: accountInfo.sequence + '',
            gasLimit,
            gasPrice,
            pubKey,
        });
        const txRaw = TxRaw.fromPartial({
            bodyBytes,
            authInfoBytes,
            signatures: [toBuffer(signature)],
        });
        return TxRaw.encode(txRaw).finish();
    }
    getBodyBytes(typeUrl, msgBytes) {
        const msgWrapped = Any.fromPartial({
            typeUrl,
            value: msgBytes,
        });
        const txBody = TxBody.fromPartial({
            messages: [msgWrapped],
        });
        return TxBody.encode(txBody).finish();
    }
    getEIP712Struct(typeUrl, types, accountNumber, sequence, chainId, msg, txOption) {
        const { gasLimit, gasPrice, denom = DEFAULT_DENOM, payer } = txOption;
        const fee = generateFee(String(BigInt(gasLimit) * BigInt(gasPrice)), denom, String(gasLimit), payer, '');
        const wrapperTypes = generateTypes(types);
        const wrapperMsg = typeWrapper(typeUrl, msg);
        const messages = generateMessage(accountNumber, sequence, chainId, '', fee, wrapperMsg, '0');
        return createEIP712(wrapperTypes, chainId, messages);
    }
};
Basic = __decorate([
    singleton(),
    __param(0, inject('RPC_URL')),
    __param(1, inject('CHAIN_ID')),
    __metadata("design:paramtypes", [String, String])
], Basic);

let Account = class Account {
    constructor(basic) {
        this.basic = basic;
        this.queryClient = container.resolve(RpcQueryClient);
    }
    async multiTransfer(address, msg) {
        return await this.basic.tx(MsgMultiSendTypeUrl, address, MsgMultiSendSDKTypeEIP712, MsgMultiSend.toSDK(msg), MsgMultiSend.encode(msg).finish());
    }
    async createPaymentAccount(msg) {
        return await this.basic.tx(MsgCreatePaymentAccountTypeUrl, msg.creator, MsgCreatePaymentAccountSDKTypeEIP712, MsgCreatePaymentAccount.toSDK(msg), MsgCreatePaymentAccount.encode(msg).finish());
    }
    async getPaymentAccountsByOwner(owner) {
        const rpc = await this.queryClient.getPaymentQueryClient();
        return await rpc.GetPaymentAccountsByOwner({
            owner,
        });
    }
    async getModuleAccountByName(name) {
        const rpc = await this.queryClient.getAuthQueryClient();
        return rpc.ModuleAccountByName({
            name,
        });
    }
    async getModuleAccounts() {
        const rpc = await this.queryClient.getAuthQueryClient();
        return await rpc.ModuleAccounts();
    }
    async getPaymentAccount(request) {
        const rpc = await this.queryClient.getPaymentQueryClient();
        return await rpc.PaymentAccount(request);
    }
    async getAccountBalance(request) {
        const rpc = await this.queryClient.getBankQueryClient();
        return await rpc.Balance(request);
    }
    async getAccount(address) {
        const client = await this.queryClient.getQueryClient();
        const account = await client.auth.account(address);
        if (!account)
            return BaseAccount.fromJSON({});
        return BaseAccount.toJSON(BaseAccount.decode(account.value));
    }
    async transfer(msg) {
        return await this.basic.tx(MsgSendTypeUrl, msg.fromAddress, MsgSendSDKTypeEIP712, MsgSend.toSDK(msg), MsgSend.encode(msg).finish());
    }
};
Account = __decorate([
    singleton(),
    __param(0, inject(delay(() => Basic))),
    __metadata("design:paramtypes", [Basic])
], Account);

const MsgCreateBucketTypeUrl = '/greenfield.storage.MsgCreateBucket';
const MsgCreateBucketSDKTypeEIP712 = {
    Msg: [
        {
            name: 'type',
            type: 'string',
        },
        {
            name: 'creator',
            type: 'string',
        },
        {
            name: 'bucket_name',
            type: 'string',
        },
        {
            name: 'visibility',
            type: 'string',
        },
        {
            name: 'payment_address',
            type: 'string',
        },
        {
            name: 'primary_sp_address',
            type: 'string',
        },
        {
            name: 'primary_sp_approval',
            type: 'TypePrimarySpApproval',
        },
        {
            name: 'charged_read_quota',
            type: 'uint64',
        },
    ],
    TypePrimarySpApproval: [
        {
            name: 'expired_height',
            type: 'uint64',
        },
        {
            name: 'sig',
            type: 'bytes',
        },
    ],
};

const MsgDeleteBucketTypeUrl = '/greenfield.storage.MsgDeleteBucket';
const MsgDeleteBucketSDKTypeEIP712 = {
    Msg: [
        {
            name: 'type',
            type: 'string',
        },
        {
            name: 'operator',
            type: 'string',
        },
        {
            name: 'bucket_name',
            type: 'string',
        },
    ],
};

const MsgDeletePolicySDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'primary_sp_address',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'uint64',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'uint64',
            name: 'payload_size',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'content_type',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'Uint8Array[]',
            name: 'expect_checksums',
        },
        {
            type: 'string',
            name: 'redundancy_type',
        },
        {
            type: 'string[]',
            name: 'expect_secondary_sp_addresses',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string[]',
            name: 'secondary_sp_addresses',
        },
        {
            type: 'Uint8Array[]',
            name: 'secondary_sp_signatures',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'src_bucket_name',
        },
        {
            type: 'string',
            name: 'dst_bucket_name',
        },
        {
            type: 'string',
            name: 'src_object_name',
        },
        {
            type: 'string',
            name: 'dst_object_name',
        },
        {
            type: 'TypeDstPrimarySpApproval',
            name: 'dst_primary_sp_approval',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string[]',
            name: 'object_ids',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members_to_add',
        },
        {
            type: 'string[]',
            name: 'members_to_delete',
        },
        {
            type: 'string',
            name: 'member',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'TypeChargedReadQuota',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'TypePrincipal',
            name: 'principal',
        },
        {
            type: 'string',
            name: 'resource',
        },
        {
            type: 'StatementSDKType[]',
            name: 'statements',
        },
        {
            type: 'TypeExpirationTime',
            name: 'expiration_time',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'TypePrincipal',
            name: 'principal',
        },
        {
            type: 'string',
            name: 'resource',
        },
    ],
    TypePrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeDstPrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeChargedReadQuota: [
        {
            type: 'uint64',
            name: 'value',
        },
    ],
    TypePrincipal: [
        {
            name: 'type',
        },
        {
            type: 'string',
            name: 'value',
        },
    ],
    TypeExpirationTime: [
        {
            type: 'uint64',
            name: 'seconds',
        },
        {
            type: 'uint64',
            name: 'nanos',
        },
    ],
};

const MsgPutPolicySDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'primary_sp_address',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'uint64',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'uint64',
            name: 'payload_size',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'content_type',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'Uint8Array[]',
            name: 'expect_checksums',
        },
        {
            type: 'string',
            name: 'redundancy_type',
        },
        {
            type: 'string[]',
            name: 'expect_secondary_sp_addresses',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string[]',
            name: 'secondary_sp_addresses',
        },
        {
            type: 'Uint8Array[]',
            name: 'secondary_sp_signatures',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'src_bucket_name',
        },
        {
            type: 'string',
            name: 'dst_bucket_name',
        },
        {
            type: 'string',
            name: 'src_object_name',
        },
        {
            type: 'string',
            name: 'dst_object_name',
        },
        {
            type: 'TypeDstPrimarySpApproval',
            name: 'dst_primary_sp_approval',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string[]',
            name: 'object_ids',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members_to_add',
        },
        {
            type: 'string[]',
            name: 'members_to_delete',
        },
        {
            type: 'string',
            name: 'member',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'TypeChargedReadQuota',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'TypePrincipal',
            name: 'principal',
        },
        {
            type: 'string',
            name: 'resource',
        },
        {
            type: 'StatementSDKType[]',
            name: 'statements',
        },
        {
            type: 'TypeExpirationTime',
            name: 'expiration_time',
        },
    ],
    TypePrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeDstPrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeChargedReadQuota: [
        {
            type: 'uint64',
            name: 'value',
        },
    ],
    TypePrincipal: [
        {
            name: 'type',
        },
        {
            type: 'string',
            name: 'value',
        },
    ],
    TypeExpirationTime: [
        {
            type: 'uint64',
            name: 'seconds',
        },
        {
            type: 'uint64',
            name: 'nanos',
        },
    ],
};

const MsgUpdateBucketInfoSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'primary_sp_address',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'uint64',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'uint64',
            name: 'payload_size',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'content_type',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'Uint8Array[]',
            name: 'expect_checksums',
        },
        {
            type: 'string',
            name: 'redundancy_type',
        },
        {
            type: 'string[]',
            name: 'expect_secondary_sp_addresses',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string[]',
            name: 'secondary_sp_addresses',
        },
        {
            type: 'Uint8Array[]',
            name: 'secondary_sp_signatures',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'src_bucket_name',
        },
        {
            type: 'string',
            name: 'dst_bucket_name',
        },
        {
            type: 'string',
            name: 'src_object_name',
        },
        {
            type: 'string',
            name: 'dst_object_name',
        },
        {
            type: 'TypeDstPrimarySpApproval',
            name: 'dst_primary_sp_approval',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string[]',
            name: 'object_ids',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members_to_add',
        },
        {
            type: 'string[]',
            name: 'members_to_delete',
        },
        {
            type: 'string',
            name: 'member',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'TypeChargedReadQuota',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'visibility',
        },
    ],
    TypePrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeDstPrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeChargedReadQuota: [
        {
            type: 'uint64',
            name: 'value',
        },
    ],
};

const toHex = (char = '') => {
    return char.charCodeAt(0).toString(16);
};
const encodeToHex = (str = '') => {
    return str.split('').map(toHex).join('');
};
const decodeFromHex = (hex = '') => {
    const result = [];
    for (let i = 0; i < hex.length; i += 2) {
        result.push(String.fromCharCode(parseInt(hex.substr(i, 2), 16)));
    }
    return result.join('');
};
const encodeObjectToHexString = (jsonObject) => {
    const utf8Encoder = new TextEncoder();
    const utf8Bytes = utf8Encoder.encode(JSON.stringify(jsonObject));
    return Array.from(utf8Bytes)
        .map((b) => b.toString(16).padStart(2, '0'))
        .join('');
};
const encodeToHexString = (str = '') => {
    const utf8Encoder = new TextEncoder();
    const utf8Bytes = utf8Encoder.encode(str);
    return Array.from(utf8Bytes)
        .map((b) => b.toString(16).padStart(2, '0'))
        .join('');
};
const hexToBytes = (hex = '') => {
    const bytes = new Uint8Array(hex.length / 2);
    for (let i = 0; i < hex.length; i += 2) {
        bytes[i / 2] = parseInt(hex.slice(i, i + 2), 16);
    }
    return bytes;
};
function uint8ArrayToJson(uint8Array) {
    const decoder = new TextDecoder('utf-8');
    const jsonString = decoder.decode(uint8Array);
    return JSON.parse(jsonString);
}
const decodeObjectFromHexString = (hex = '') => {
    return uint8ArrayToJson(hexToBytes(hex));
};

const MOCK_SIGNATURE = '1234567812345678123456781234567812345678123456781234567812345678';
const NORMAL_ERROR_CODE = 404;
const METHOD_GET = 'GET';
const METHOD_PUT = 'PUT';
function timeoutAfter(duration) {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            reject(new Error('request time out'));
        }, duration);
    });
}
const fetchWithTimeout = async (fetchUrl = '', fetchOptions = {}, duration = 30000) => {
    try {
        const response = await Promise.race([timeoutAfter(duration), fetch(fetchUrl, fetchOptions)]);
        return response;
    }
    catch (error) {
        return Promise.reject(error);
    }
};

const IP_REGEX = /^(\d+\.){3}\d+$/g;
const ALLOW_REGEX = /^[a-z0-9][a-z0-9.\-]{1,61}[a-z0-9]$/g;
const dotdotComponent = '..';
const dotComponent = '.';
const slashSeparator = '/';
const isValidBucketName = (bucketName) => {
    if (!bucketName) {
        throw new Error('Bucket name is empty, please check.');
    }
    const length = bucketName.length;
    if (length < 3 || length > 63) {
        throw new Error(`Bucket name length is required to be between 3~63, please check.`);
    }
    if (bucketName.match(IP_REGEX)) {
        throw new Error('The bucket name %s cannot be formatted as an IP address, please check.');
    }
    if (bucketName.includes('..') || bucketName.includes('.-') || bucketName.includes('-.')) {
        throw new Error('Bucket name contains invalid characters, please check.');
    }
    if (!bucketName.match(ALLOW_REGEX)) {
        throw new Error('Bucket name can only include lowercase letters, numbers, commas and hyphen, please check.');
    }
    if (bucketName[0] === '-' ||
        bucketName[length - 1] === '-' ||
        bucketName[0] === '.' ||
        bucketName[length - 1] === '.') {
        throw new Error('Bucket name %must start and end with a lowercase letter or number, please check.');
    }
    return true;
};
const hasBadPathComponent = (path) => {
    const newPath = path.trim();
    for (const p of newPath.split(slashSeparator)) {
        switch (p.trim()) {
            case dotdotComponent:
            case dotComponent:
                return true;
        }
    }
    return false;
};
const isUTF8 = (str) => {
    try {
        new TextDecoder('utf-8').decode(new TextEncoder().encode(str));
        return true;
    }
    catch {
        return false;
    }
};
const isValidObjectName = (objectName) => {
    if (!objectName) {
        throw new Error('Object name is empty, please check.');
    }
    if (objectName.length > 1024) {
        throw new Error('Object name is limited to 1024 at most, please check.');
    }
    if (hasBadPathComponent(objectName)) {
        throw new Error('Object name error, please check.');
    }
    if (!isUTF8(objectName)) {
        throw new Error('Object name is not in UTF-8 format, please check.');
    }
    if (objectName.includes(`//`)) {
        throw new Error(`Object name that contains a "//" is not supported`);
    }
    return true;
};
const isValidAddress = (address) => {
    if (!address) {
        throw new Error('Address is empty, please check.');
    }
    if (address.length > 1024) {
        throw new Error('Address is limited to 1024 at most, please check.');
    }
    return true;
};
const isValidUrl = (url) => {
    if (!url || url.length === 0)
        return false;
    const pattern = new RegExp('^(https?:\\/\\/)?' + // 协议
        '((([a-zA-Z\\d]([a-zA-Z\\d-]{0,61}[a-zA-Z\\d])?)\\.)+' + // 域名
        '[a-zA-Z]{2,13})' + // 顶级域名
        '(\\:\\d{1,5})?' + // 端口号
        '(\\/[-a-zA-Z\\d%_.~+]*)*' + // 路径
        '(\\?[;&a-zA-Z\\d%_.~+=-]*)?' + // 查询字符串
        '(\\#[-a-zA-Z\\d_]*)?$', 'i'); // 锚点
    return pattern.test(url);
};
// remove specified from prefix and suffix of a string
const trimString = (originString, deleteString) => {
    const delStrLength = deleteString.length;
    if (originString.startsWith(deleteString)) {
        originString = originString.substring(delStrLength);
    }
    if (originString.endsWith(deleteString)) {
        originString = originString.substring(0, originString.length - delStrLength);
    }
    return originString;
};
const generateUrlByBucketName = (endpoint = '', bucketName) => {
    if (!isValidUrl(endpoint)) {
        throw new Error('Invalid endpoint');
    }
    if (!isValidBucketName(bucketName)) ;
    const { protocol } = new URL(endpoint);
    return endpoint.replace(`${protocol}//`, `${protocol}//${bucketName}.`);
};

let Bucket = class Bucket {
    constructor(basic) {
        this.basic = basic;
        this.queryClient = container.resolve(RpcQueryClient);
    }
    async getCreateBucketApproval({ bucketName, creator, visibility = 'VISIBILITY_TYPE_PUBLIC_READ', chargedReadQuota, spInfo, duration, }) {
        try {
            if (!spInfo.primarySpAddress) {
                throw new Error('Primary sp address is missing');
            }
            if (!isValidBucketName(bucketName)) ;
            if (!creator) {
                throw new Error('Empty creator address');
            }
            const endpoint = spInfo.endpoint;
            const msg = {
                bucket_name: bucketName,
                creator,
                visibility,
                primary_sp_address: spInfo.primarySpAddress,
                primary_sp_approval: {
                    expired_height: '0',
                    sig: '',
                },
                charged_read_quota: chargedReadQuota,
                payment_address: '',
            };
            const url = endpoint + '/greenfield/admin/v1/get-approval?action=CreateBucket';
            const unSignedMessageInHex = encodeObjectToHexString(msg);
            const headers = new Headers({
                // TODO: replace when offchain release
                Authorization: `authTypeV2 ECDSA-secp256k1, Signature=${MOCK_SIGNATURE}`,
                'X-Gnfd-Unsigned-Msg': unSignedMessageInHex,
            });
            const result = await fetchWithTimeout(url, {
                headers,
                method: METHOD_GET,
            }, duration);
            const { status } = result;
            if (!result.ok) {
                return {
                    code: -1,
                    message: 'Get create bucket approval error.',
                    statusCode: status,
                };
            }
            const resultContentType = result.headers.get('Content-Type');
            if (resultContentType === 'text/xml' || resultContentType === 'application/xml') {
                const xmlText = await result.text();
                const xml = await new window.DOMParser().parseFromString(xmlText, 'text/xml');
                return {
                    code: -1,
                    xml,
                    message: 'Get create bucket approval error.',
                    statusCode: status,
                };
            }
            const signedMsgString = result.headers.get('X-Gnfd-Signed-Msg') || '';
            const signedMsg = decodeObjectFromHexString(signedMsgString);
            return {
                code: 0,
                message: 'Get create bucket approval success.',
                body: signedMsgString,
                statusCode: status,
                signedMsg: signedMsg,
            };
        }
        catch (error) {
            return { code: -1, message: error.message, statusCode: NORMAL_ERROR_CODE };
        }
    }
    async createBucketTx(msg, signedMsg) {
        return await this.basic.tx(MsgCreateBucketTypeUrl, msg.creator, MsgCreateBucketSDKTypeEIP712, {
            ...signedMsg,
            type: MsgCreateBucketTypeUrl,
            charged_read_quota: signedMsg.charged_read_quota,
            visibility: signedMsg.visibility,
            primary_sp_approval: {
                expired_height: signedMsg.primary_sp_approval.expired_height,
                sig: signedMsg.primary_sp_approval.sig,
            },
        }, MsgCreateBucket.encode(msg).finish());
    }
    async createBucket(params) {
        const { signedMsg } = await this.getCreateBucketApproval(params);
        if (!signedMsg) {
            throw new Error('Get create bucket approval error');
        }
        const msg = {
            bucketName: signedMsg.bucket_name,
            creator: signedMsg.creator,
            visibility: visibilityTypeFromJSON(signedMsg.visibility),
            primarySpAddress: signedMsg.primary_sp_address,
            primarySpApproval: {
                expiredHeight: Long.fromString(signedMsg.primary_sp_approval.expired_height),
                sig: bytesFromBase64(signedMsg.primary_sp_approval.sig),
            },
            chargedReadQuota: signedMsg.charged_read_quota
                ? Long.fromString('0')
                : Long.fromString(signedMsg.charged_read_quota),
            paymentAddress: '',
        };
        return await this.createBucketTx(msg, signedMsg);
    }
    async deleteBucket(msg) {
        return await this.basic.tx(MsgDeleteBucketTypeUrl, msg.operator, MsgDeleteBucketSDKTypeEIP712, MsgDeleteBucket.toSDK(msg), MsgDeleteBucket.encode(msg).finish());
    }
    async headBucket(bucketName) {
        const rpc = await this.queryClient.getBucketQueryClient();
        return await rpc.HeadBucket({
            bucketName,
        });
    }
    async headBucketById(bucketId) {
        const rpc = await this.queryClient.getBucketQueryClient();
        return await rpc.HeadBucketById({
            bucketId,
        });
    }
    async getVerifyPermission(bucketName, operator, actionType) {
        const rpc = await this.queryClient.getBucketQueryClient();
        return rpc.VerifyPermission({
            bucketName,
            operator,
            objectName: '',
            actionType,
        });
    }
    async getUserBuckets(configParam) {
        try {
            const { address, duration = 30000, endpoint } = configParam;
            if (!isValidAddress(address)) ;
            if (!isValidUrl(endpoint)) {
                throw new Error('Invalid endpoint');
            }
            const url = endpoint;
            const signature = MOCK_SIGNATURE;
            const headers = new Headers({
                // todo place the correct authorization string
                Authorization: `authTypeV2 ECDSA-secp256k1, Signature=${signature}`,
                'X-Gnfd-User-Address': address,
            });
            const result = await fetchWithTimeout(url, {
                headers,
                method: METHOD_GET,
            }, duration);
            const { status } = result;
            if (!result.ok) {
                return { code: -1, message: 'Get bucket error.', statusCode: status };
            }
            const { buckets } = await result.json();
            return {
                code: 0,
                message: 'Get bucket success.',
                statusCode: status,
                body: buckets,
            };
        }
        catch (error) {
            return { code: -1, message: error.message, statusCode: NORMAL_ERROR_CODE };
        }
    }
    async getBucketReadQuota(configParam) {
        try {
            const { bucketName, endpoint, duration = 30000, year, month } = configParam;
            // todo generate real signature
            const signature = MOCK_SIGNATURE;
            if (!isValidUrl(endpoint)) {
                throw new Error('Invalid endpoint');
            }
            if (!isValidBucketName(bucketName)) ;
            const currentDate = new Date();
            const finalYear = year ? year : currentDate.getFullYear();
            const finalMonth = month ? month : currentDate.getMonth() + 1;
            const formattedMonth = finalMonth.toString().padStart(2, '0'); // format month to 2 digits, like "01"
            const url = generateUrlByBucketName(endpoint, bucketName) +
                `/?read-quota&year-month=${finalYear}-${formattedMonth}`;
            const headers = new Headers({
                Authorization: `authTypeV2 ECDSA-secp256k1, Signature=${signature}`,
            });
            const result = await fetchWithTimeout(url, {
                headers,
                method: METHOD_GET,
            }, duration);
            const { status } = result;
            if (!result.ok) {
                return { code: -1, message: 'Get Bucket Quota error.', statusCode: status };
            }
            const resultContentType = result.headers.get('Content-Type');
            // Will receive xml when get object met error
            if (resultContentType === 'text/xml' || resultContentType === 'application/xml') {
                const xmlText = await result.text();
                const xml = await new window.DOMParser().parseFromString(xmlText, 'text/xml');
                const ReadQuotaSize = xml.getElementsByTagName('ReadQuotaSize')[0]
                    .textContent;
                const SPFreeReadQuotaSize = xml.getElementsByTagName('SPFreeReadQuotaSize')[0].textContent;
                const ReadConsumedSize = xml.getElementsByTagName('ReadConsumedSize')[0]
                    .textContent;
                return {
                    code: 0,
                    body: {
                        readQuota: Number(ReadQuotaSize ?? '0'),
                        freeQuota: Number(SPFreeReadQuotaSize ?? '0'),
                        consumedQuota: Number(ReadConsumedSize ?? '0'),
                    },
                    message: 'Get bucket read quota.',
                    statusCode: status,
                };
            }
            else {
                return {
                    code: -1,
                    message: 'Get bucket read quota error.',
                    statusCode: status,
                };
            }
        }
        catch (error) {
            return { code: -1, message: error.message, statusCode: NORMAL_ERROR_CODE };
        }
    }
    async updateBucketInfo(msg) {
        return await this.basic.tx('/greenfield.storage.MsgUpdateBucketInfo', msg.operator, MsgUpdateBucketInfoSDKTypeEIP712, MsgUpdateBucketInfo.toSDK(msg), MsgUpdateBucketInfo.encode(msg).finish());
    }
    async putBucketPolicy(msg) {
        return await this.basic.tx('/greenfield.storage.MsgPutPolicy', msg.operator, MsgPutPolicySDKTypeEIP712, MsgPutPolicy.toSDK(msg), MsgPutPolicy.encode(msg).finish());
    }
    async deleteBucketPolicy(msg) {
        const typeUrl = '/greenfield.storage.MsgDeletePolicy';
        return await this.basic.tx(typeUrl, msg.operator, MsgDeletePolicySDKTypeEIP712, MsgDeletePolicy.toSDK(msg), MsgDeletePolicy.encode(msg).finish());
    }
};
Bucket = __decorate([
    singleton(),
    __param(0, inject(delay(() => Basic))),
    __metadata("design:paramtypes", [Basic])
], Bucket);

const MsgAttestSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'challenger',
        },
        {
            type: 'string',
            name: 'sp_operator_address',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'uint64',
            name: 'segment_index',
        },
        {
            type: 'bool',
            name: 'random_index',
        },
        {
            type: 'string',
            name: 'submitter',
        },
        {
            type: 'uint64',
            name: 'challenge_id',
        },
        {
            type: 'string',
            name: 'object_id',
        },
        {
            type: 'string',
            name: 'sp_operator_address',
        },
        {
            type: 'string',
            name: 'vote_result',
        },
        {
            type: 'string',
            name: 'challenger_address',
        },
        {
            type: 'uint64[]',
            name: 'vote_validator_set',
        },
        {
            type: 'bytes',
            name: 'vote_agg_signature',
        },
    ],
};

const MsgSubmitSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'challenger',
        },
        {
            type: 'string',
            name: 'sp_operator_address',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'uint64',
            name: 'segment_index',
        },
        {
            type: 'bool',
            name: 'random_index',
        },
    ],
};

let Challenge = class Challenge {
    constructor(basic) {
        this.basic = basic;
        this.queryClient = container.resolve(RpcQueryClient);
    }
    async submitChallenge(address, msg) {
        return await this.basic.tx('/greenfield.challenge.MsgSubmit', address, MsgSubmitSDKTypeEIP712, MsgSubmit.toSDK(msg), MsgSubmit.encode(msg).finish());
    }
    async attestChallenge(address, msg) {
        return await this.basic.tx('/greenfield.challenge.MsgAttest', address, MsgAttestSDKTypeEIP712, MsgAttest.toSDK(msg), MsgAttest.encode(msg).finish());
    }
    async latestAttestedChallenges() {
        const rpc = await this.queryClient.getChallengeQueryClient();
        return await rpc.LatestAttestedChallenges();
    }
    async inturnAttestationSubmitter() {
        const rpc = await this.queryClient.getChallengeQueryClient();
        return await rpc.InturnAttestationSubmitter();
    }
};
Challenge = __decorate([
    singleton(),
    __param(0, inject(delay(() => Basic))),
    __metadata("design:paramtypes", [Basic])
], Challenge);

const MsgClaimSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'from_address',
        },
        {
            type: 'uint64',
            name: 'src_chain_id',
        },
        {
            type: 'uint64',
            name: 'dest_chain_id',
        },
        {
            type: 'uint64',
            name: 'sequence',
        },
        {
            type: 'uint64',
            name: 'timestamp',
        },
        {
            type: 'bytes',
            name: 'payload',
        },
        {
            type: 'uint64[]',
            name: 'vote_address_set',
        },
        {
            type: 'bytes',
            name: 'agg_signature',
        },
    ],
};

const MsgTransferOutTypeUrl = '/greenfield.bridge.MsgTransferOut';
const MsgTransferOutSDKTypeEIP712 = {
    Msg: [
        {
            name: 'type',
            type: 'string',
        },
        {
            name: 'from',
            type: 'string',
        },
        {
            name: 'to',
            type: 'string',
        },
        {
            name: 'amount',
            type: 'TypeAmount',
        },
    ],
};

const MsgMirrorBucketSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'primary_sp_address',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'uint64',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'uint64',
            name: 'payload_size',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'content_type',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'Uint8Array[]',
            name: 'expect_checksums',
        },
        {
            type: 'string',
            name: 'redundancy_type',
        },
        {
            type: 'string[]',
            name: 'expect_secondary_sp_addresses',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string[]',
            name: 'secondary_sp_addresses',
        },
        {
            type: 'Uint8Array[]',
            name: 'secondary_sp_signatures',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'src_bucket_name',
        },
        {
            type: 'string',
            name: 'dst_bucket_name',
        },
        {
            type: 'string',
            name: 'src_object_name',
        },
        {
            type: 'string',
            name: 'dst_object_name',
        },
        {
            type: 'TypeDstPrimarySpApproval',
            name: 'dst_primary_sp_approval',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string[]',
            name: 'object_ids',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members_to_add',
        },
        {
            type: 'string[]',
            name: 'members_to_delete',
        },
        {
            type: 'string',
            name: 'member',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'TypeChargedReadQuota',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'TypePrincipal',
            name: 'principal',
        },
        {
            type: 'string',
            name: 'resource',
        },
        {
            type: 'StatementSDKType[]',
            name: 'statements',
        },
        {
            type: 'TypeExpirationTime',
            name: 'expiration_time',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'TypePrincipal',
            name: 'principal',
        },
        {
            type: 'string',
            name: 'resource',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'id',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'id',
        },
    ],
    TypePrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeDstPrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeChargedReadQuota: [
        {
            type: 'uint64',
            name: 'value',
        },
    ],
    TypePrincipal: [
        {
            name: 'type',
        },
        {
            type: 'string',
            name: 'value',
        },
    ],
    TypeExpirationTime: [
        {
            type: 'uint64',
            name: 'seconds',
        },
        {
            type: 'uint64',
            name: 'nanos',
        },
    ],
};

const MsgMirrorGroupSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'primary_sp_address',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'uint64',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'uint64',
            name: 'payload_size',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'content_type',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'Uint8Array[]',
            name: 'expect_checksums',
        },
        {
            type: 'string',
            name: 'redundancy_type',
        },
        {
            type: 'string[]',
            name: 'expect_secondary_sp_addresses',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string[]',
            name: 'secondary_sp_addresses',
        },
        {
            type: 'Uint8Array[]',
            name: 'secondary_sp_signatures',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'src_bucket_name',
        },
        {
            type: 'string',
            name: 'dst_bucket_name',
        },
        {
            type: 'string',
            name: 'src_object_name',
        },
        {
            type: 'string',
            name: 'dst_object_name',
        },
        {
            type: 'TypeDstPrimarySpApproval',
            name: 'dst_primary_sp_approval',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string[]',
            name: 'object_ids',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members_to_add',
        },
        {
            type: 'string[]',
            name: 'members_to_delete',
        },
        {
            type: 'string',
            name: 'member',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'TypeChargedReadQuota',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'TypePrincipal',
            name: 'principal',
        },
        {
            type: 'string',
            name: 'resource',
        },
        {
            type: 'StatementSDKType[]',
            name: 'statements',
        },
        {
            type: 'TypeExpirationTime',
            name: 'expiration_time',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'TypePrincipal',
            name: 'principal',
        },
        {
            type: 'string',
            name: 'resource',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'id',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'id',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'id',
        },
    ],
    TypePrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeDstPrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeChargedReadQuota: [
        {
            type: 'uint64',
            name: 'value',
        },
    ],
    TypePrincipal: [
        {
            name: 'type',
        },
        {
            type: 'string',
            name: 'value',
        },
    ],
    TypeExpirationTime: [
        {
            type: 'uint64',
            name: 'seconds',
        },
        {
            type: 'uint64',
            name: 'nanos',
        },
    ],
};

const MsgMirrorObjectSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'primary_sp_address',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'uint64',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'uint64',
            name: 'payload_size',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'content_type',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'Uint8Array[]',
            name: 'expect_checksums',
        },
        {
            type: 'string',
            name: 'redundancy_type',
        },
        {
            type: 'string[]',
            name: 'expect_secondary_sp_addresses',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string[]',
            name: 'secondary_sp_addresses',
        },
        {
            type: 'Uint8Array[]',
            name: 'secondary_sp_signatures',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'src_bucket_name',
        },
        {
            type: 'string',
            name: 'dst_bucket_name',
        },
        {
            type: 'string',
            name: 'src_object_name',
        },
        {
            type: 'string',
            name: 'dst_object_name',
        },
        {
            type: 'TypeDstPrimarySpApproval',
            name: 'dst_primary_sp_approval',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string[]',
            name: 'object_ids',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members_to_add',
        },
        {
            type: 'string[]',
            name: 'members_to_delete',
        },
        {
            type: 'string',
            name: 'member',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'TypeChargedReadQuota',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'TypePrincipal',
            name: 'principal',
        },
        {
            type: 'string',
            name: 'resource',
        },
        {
            type: 'StatementSDKType[]',
            name: 'statements',
        },
        {
            type: 'TypeExpirationTime',
            name: 'expiration_time',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'TypePrincipal',
            name: 'principal',
        },
        {
            type: 'string',
            name: 'resource',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'id',
        },
    ],
    TypePrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeDstPrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeChargedReadQuota: [
        {
            type: 'uint64',
            name: 'value',
        },
    ],
    TypePrincipal: [
        {
            name: 'type',
        },
        {
            type: 'string',
            name: 'value',
        },
    ],
    TypeExpirationTime: [
        {
            type: 'uint64',
            name: 'seconds',
        },
        {
            type: 'uint64',
            name: 'nanos',
        },
    ],
};

let CrossChain = class CrossChain {
    constructor() {
        this.basic = container.resolve(Basic);
        this.queryClient = container.resolve(RpcQueryClient);
    }
    async transferOut(msg) {
        return await this.basic.tx(MsgTransferOutTypeUrl, msg.from, MsgTransferOutSDKTypeEIP712, MsgTransferOut.toSDK(msg), MsgTransferOut.encode(msg).finish());
    }
    async claims(msg) {
        return await this.basic.tx('/cosmos.oracle.v1.MsgClaim', msg.fromAddress, MsgClaimSDKTypeEIP712, MsgClaim.toSDK(msg), MsgClaim.encode(msg).finish());
    }
    async getChannelSendSequence(channelId) {
        const rpc = await this.queryClient.getCrosschainQueryClient();
        return await rpc.SendSequence({
            channelId,
        });
    }
    async getChannelReceiveSequence(channelId) {
        const rpc = await this.queryClient.getCrosschainQueryClient();
        return await rpc.ReceiveSequence({
            channelId,
        });
    }
    async getInturnRelayer() {
        const rpc = await this.queryClient.getOracleQueryClient();
        return await rpc.InturnRelayer();
    }
    async getCrosschainPackage(channelId, sequence) {
        const rpc = await this.queryClient.getCrosschainQueryClient();
        return await rpc.CrossChainPackage({
            channelId,
            sequence: Long.fromNumber(sequence),
        });
    }
    async mirrorGroup(msg) {
        return await this.basic.tx('/greenfield.storage.MsgMirrorGroup', msg.operator, MsgMirrorGroupSDKTypeEIP712, MsgMirrorGroup.toSDK(msg), MsgMirrorGroup.encode(msg).finish());
    }
    async mirrorBucket(msg) {
        return await this.basic.tx('/greenfield.storage.MsgMirrorBucket', msg.operator, MsgMirrorBucketSDKTypeEIP712, MsgMirrorBucket.toSDK(msg), MsgMirrorBucket.encode(msg).finish());
    }
    async mirrorObject(msg) {
        return await this.basic.tx('/greenfield.storage.MsgMirrorObject', msg.operator, MsgMirrorObjectSDKTypeEIP712, MsgMirrorObject.toSDK(msg), MsgMirrorObject.encode(msg).finish());
    }
    async getParams() {
        const rpc = await this.queryClient.getBridgeQueryClient();
        return rpc.Params();
    }
};
CrossChain = __decorate([
    singleton()
], CrossChain);

class Distribution {
    constructor() {
        this.basic = container.resolve(Basic);
        this.queryClient = container.resolve(RpcQueryClient);
    }
    async setWithdrawAddress(withdrawAddress, delegatorAddress) {
        const rpc = await this.queryClient.getMsgClient();
        return await rpc.SetWithdrawAddress({
            withdrawAddress,
            delegatorAddress,
        });
    }
    async withdrawValidatorCommission(validatorAddress) {
        const rpc = await this.queryClient.getMsgClient();
        return rpc.WithdrawValidatorCommission({
            validatorAddress,
        });
    }
    async withdrawDelegatorReward(validatorAddress, delegatorAddress) {
        const rpc = await this.queryClient.getMsgClient();
        return rpc.WithdrawDelegatorReward({
            delegatorAddress,
            validatorAddress,
        });
    }
    async fundCommunityPoolundComm(amount, depositor) {
        const rpc = await this.queryClient.getMsgClient();
        return rpc.FundCommunityPool({
            amount,
            depositor,
        });
    }
}

const MsgGrantAllowanceTypeUrl = '/cosmos/feegrant/v1beta1/MsgGrantAllowance';
const MsgGrantAllowanceSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'granter',
        },
        {
            type: 'string',
            name: 'grantee',
        },
        {
            type: 'TypeAllowance',
            name: 'allowance',
        },
    ],
    TypeAllowance: [
        {
            type: 'string',
            name: 'type_url',
        },
        {
            type: 'bytes',
            name: 'value',
        },
    ],
};

const MsgRevokeAllowanceTypeUrl = '/cosmos/feegrant/v1beta1/MsgRevokeAllowance';
const MsgRevokeAllowanceSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'granter',
        },
        {
            type: 'string',
            name: 'grantee',
        },
        {
            type: 'TypeAllowance',
            name: 'allowance',
        },
        {
            type: 'string',
            name: 'granter',
        },
        {
            type: 'string',
            name: 'grantee',
        },
    ],
    TypeAllowance: [
        {
            type: 'string',
            name: 'type_url',
        },
        {
            type: 'bytes',
            name: 'value',
        },
    ],
};

let FeeGrant = class FeeGrant {
    constructor() {
        this.basic = container.resolve(Basic);
        this.queryClient = container.resolve(RpcQueryClient);
    }
    async grantAllowance(msg) {
        return await this.basic.tx(MsgGrantAllowanceTypeUrl, msg.granter, MsgGrantAllowanceSDKTypeEIP712, MsgGrantAllowance.toSDK(msg), MsgGrantAllowance.encode(msg).finish());
    }
    async revokeAllowance(msg) {
        return await this.basic.tx(MsgRevokeAllowanceTypeUrl, msg.granter, MsgRevokeAllowanceSDKTypeEIP712, MsgRevokeAllowance.toSDK(msg), MsgRevokeAllowance.encode(msg).finish());
    }
    async getAllowence(request) {
        const rpc = await this.queryClient.getFeeGrantQueryClient();
        return await rpc.Allowance(request);
    }
    async getAllowences(request) {
        const rpc = await this.queryClient.getFeeGrantQueryClient();
        return await rpc.Allowances(request);
    }
};
FeeGrant = __decorate([
    singleton()
], FeeGrant);

const MsgCreateGroupSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'primary_sp_address',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'uint64',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'uint64',
            name: 'payload_size',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'content_type',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'Uint8Array[]',
            name: 'expect_checksums',
        },
        {
            type: 'string',
            name: 'redundancy_type',
        },
        {
            type: 'string[]',
            name: 'expect_secondary_sp_addresses',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string[]',
            name: 'secondary_sp_addresses',
        },
        {
            type: 'Uint8Array[]',
            name: 'secondary_sp_signatures',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'src_bucket_name',
        },
        {
            type: 'string',
            name: 'dst_bucket_name',
        },
        {
            type: 'string',
            name: 'src_object_name',
        },
        {
            type: 'string',
            name: 'dst_object_name',
        },
        {
            type: 'TypeDstPrimarySpApproval',
            name: 'dst_primary_sp_approval',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string[]',
            name: 'object_ids',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members',
        },
    ],
    TypePrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeDstPrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
};

const MsgDeleteGroupSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'primary_sp_address',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'uint64',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'uint64',
            name: 'payload_size',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'content_type',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'Uint8Array[]',
            name: 'expect_checksums',
        },
        {
            type: 'string',
            name: 'redundancy_type',
        },
        {
            type: 'string[]',
            name: 'expect_secondary_sp_addresses',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string[]',
            name: 'secondary_sp_addresses',
        },
        {
            type: 'Uint8Array[]',
            name: 'secondary_sp_signatures',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'src_bucket_name',
        },
        {
            type: 'string',
            name: 'dst_bucket_name',
        },
        {
            type: 'string',
            name: 'src_object_name',
        },
        {
            type: 'string',
            name: 'dst_object_name',
        },
        {
            type: 'TypeDstPrimarySpApproval',
            name: 'dst_primary_sp_approval',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string[]',
            name: 'object_ids',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
    ],
    TypePrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeDstPrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
};

const MsgLeaveGroupSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'primary_sp_address',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'uint64',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'uint64',
            name: 'payload_size',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'content_type',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'Uint8Array[]',
            name: 'expect_checksums',
        },
        {
            type: 'string',
            name: 'redundancy_type',
        },
        {
            type: 'string[]',
            name: 'expect_secondary_sp_addresses',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string[]',
            name: 'secondary_sp_addresses',
        },
        {
            type: 'Uint8Array[]',
            name: 'secondary_sp_signatures',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'src_bucket_name',
        },
        {
            type: 'string',
            name: 'dst_bucket_name',
        },
        {
            type: 'string',
            name: 'src_object_name',
        },
        {
            type: 'string',
            name: 'dst_object_name',
        },
        {
            type: 'TypeDstPrimarySpApproval',
            name: 'dst_primary_sp_approval',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string[]',
            name: 'object_ids',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members_to_add',
        },
        {
            type: 'string[]',
            name: 'members_to_delete',
        },
        {
            type: 'string',
            name: 'member',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
    ],
    TypePrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeDstPrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
};

const MsgUpdateGroupMemberSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'payment_address',
        },
        {
            type: 'string',
            name: 'primary_sp_address',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'uint64',
            name: 'charged_read_quota',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'uint64',
            name: 'payload_size',
        },
        {
            type: 'string',
            name: 'visibility',
        },
        {
            type: 'string',
            name: 'content_type',
        },
        {
            type: 'TypePrimarySpApproval',
            name: 'primary_sp_approval',
        },
        {
            type: 'Uint8Array[]',
            name: 'expect_checksums',
        },
        {
            type: 'string',
            name: 'redundancy_type',
        },
        {
            type: 'string[]',
            name: 'expect_secondary_sp_addresses',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string[]',
            name: 'secondary_sp_addresses',
        },
        {
            type: 'Uint8Array[]',
            name: 'secondary_sp_signatures',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'src_bucket_name',
        },
        {
            type: 'string',
            name: 'dst_bucket_name',
        },
        {
            type: 'string',
            name: 'src_object_name',
        },
        {
            type: 'string',
            name: 'dst_object_name',
        },
        {
            type: 'TypeDstPrimarySpApproval',
            name: 'dst_primary_sp_approval',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string',
            name: 'object_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'bucket_name',
        },
        {
            type: 'string[]',
            name: 'object_ids',
        },
        {
            type: 'string',
            name: 'reason',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string',
            name: 'operator',
        },
        {
            type: 'string',
            name: 'group_owner',
        },
        {
            type: 'string',
            name: 'group_name',
        },
        {
            type: 'string[]',
            name: 'members_to_add',
        },
        {
            type: 'string[]',
            name: 'members_to_delete',
        },
    ],
    TypePrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
    TypeDstPrimarySpApproval: [
        {
            type: 'uint64',
            name: 'expired_height',
        },
        {
            type: 'bytes',
            name: 'sig',
        },
    ],
};

let Group = class Group {
    constructor() {
        this.basic = container.resolve(Basic);
        this.queryClient = container.resolve(RpcQueryClient);
    }
    async createGroup(msg) {
        return await this.basic.tx('/greenfield.storage.MsgCreateGroup', msg.creator, MsgCreateGroupSDKTypeEIP712, MsgCreateGroup.toSDK(msg), MsgCreateGroup.encode(msg).finish());
    }
    async deleteGroup(msg) {
        return await this.basic.tx('/greenfield.storage.MsgCreateGroup', msg.operator, MsgDeleteGroupSDKTypeEIP712, MsgDeleteGroup.toSDK(msg), MsgDeleteGroup.encode(msg).finish());
    }
    async updateGroupMember(msg) {
        if (msg.groupName === '') {
            throw new Error('group name is empty');
        }
        if (msg.membersToAdd.length === 0 && msg.membersToDelete.length === 0) {
            throw new Error('no update member');
        }
        return await this.basic.tx('/greenfield.storage.MsgUpdateGroupMember', msg.operator, MsgUpdateGroupMemberSDKTypeEIP712, MsgUpdateGroupMember.toSDK(msg), MsgUpdateGroupMember.encode(msg).finish());
    }
    async leaveGroup(address, msg) {
        return await this.basic.tx('/greenfield.storage.MsgLeaveGroup', address, MsgLeaveGroupSDKTypeEIP712, MsgLeaveGroup.toSDK(msg), MsgLeaveGroup.encode(msg).finish());
    }
    async headGroup(groupName, groupOwner) {
        const rpc = await this.queryClient.getStorageQueryClient();
        return await rpc.HeadGroup({
            groupName,
            groupOwner,
        });
    }
    async headGroupMember(groupName, groupOwner, member) {
        const rpc = await this.queryClient.getStorageQueryClient();
        return await rpc.HeadGroupMember({
            groupName,
            groupOwner,
            member,
        });
    }
    async getPolicyOfGroup(request) {
        const rpc = await this.queryClient.getStorageQueryClient();
        return await rpc.QueryPolicyForGroup(request);
    }
};
Group = __decorate([
    singleton()
], Group);

const MsgCancelCreateObjectTypeUrl = '/greenfield.storage.MsgCancelCreateObject';
const MsgCancelCreateObjectSDKTypeEIP712 = {
    Msg: [
        {
            name: 'type',
            type: 'string',
        },
        {
            name: 'operator',
            type: 'string',
        },
        {
            name: 'bucket_name',
            type: 'string',
        },
        {
            name: 'object_name',
            type: 'string',
        },
    ],
};

const MsgCreateObjectTypeUrl = '/greenfield.storage.MsgCreateObject';
const MsgCreateObjectSDKTypeEIP712 = {
    Msg: [
        {
            name: 'type',
            type: 'string',
        },
        {
            name: 'creator',
            type: 'string',
        },
        {
            name: 'bucket_name',
            type: 'string',
        },
        {
            name: 'object_name',
            type: 'string',
        },
        {
            name: 'payload_size',
            type: 'uint64',
        },
        {
            name: 'visibility',
            type: 'string',
        },
        {
            name: 'content_type',
            type: 'string',
        },
        {
            name: 'primary_sp_approval',
            type: 'TypePrimarySpApproval',
        },
        {
            name: 'expect_checksums',
            type: 'bytes[]',
        },
        {
            name: 'redundancy_type',
            type: 'string',
        },
        {
            name: 'expect_secondary_sp_addresses',
            type: 'string[]',
        },
    ],
    TypePrimarySpApproval: [
        {
            name: 'expired_height',
            type: 'uint64',
        },
        {
            name: 'sig',
            type: 'bytes',
        },
    ],
};

const MsgDeleteObjectTypeUrl = '/greenfield.storage.MsgDeleteObject';
const MsgDeleteObjectSDKTypeEIP712 = {
    Msg: [
        {
            name: 'type',
            type: 'string',
        },
        {
            name: 'operator',
            type: 'string',
        },
        {
            name: 'bucket_name',
            type: 'string',
        },
        {
            name: 'object_name',
            type: 'string',
        },
    ],
};

let Objectt = class Objectt {
    constructor() {
        this.basic = container.resolve(Basic);
        this.queryClient = container.resolve(RpcQueryClient);
        // private async getObjectStatusFromSP(params: IGetObjectStaus) {
        //   const {bucketInfo} = await this.bucket.headBucket(params.bucketName);
        //   const primarySpAddress = bucketInfo?.primarySpAddress
        //   // const url = params.endpoint + '/greenfield/admin/v1/get-approval?upload-progress=';
        //   // const unSignedMessageInHex = encodeObjectToHexString(msg);
        //   // const headers = new Headers({
        //   //   // TODO: replace when offchain release
        //   //   Authorization: `authTypeV2 ECDSA-secp256k1, Signature=${MOCK_SIGNATURE}`,
        //   //   'X-Gnfd-Unsigned-Msg': unSignedMessageInHex,
        //   // });
        // }
    }
    async getCreateObjectApproval({ bucketName, creator, objectName, visibility = 'VISIBILITY_TYPE_PUBLIC_READ', spInfo, duration = 3000, file, redundancyType = 'REDUNDANCY_EC_TYPE', }) {
        try {
            if (!isValidUrl(spInfo.endpoint)) {
                throw new Error('Invalid endpoint');
            }
            if (!file) {
                throw new Error('File is needed');
            }
            if (!isValidBucketName(bucketName)) ;
            if (!isValidObjectName(objectName)) ;
            if (!creator) {
                throw new Error('empty creator address');
            }
            const buffer = await file.arrayBuffer();
            const bytes = new Uint8Array(buffer);
            const hashResult = await FileHandler.getPieceHashRoots(bytes);
            const { contentLength, expectCheckSums } = hashResult;
            const finalContentType = file && file.type && file.type.length > 0 ? file.type : 'application/octet-stream';
            const msg = {
                creator: creator,
                object_name: objectName,
                content_type: finalContentType,
                payload_size: contentLength.toString(),
                bucket_name: bucketName,
                visibility,
                primary_sp_approval: { expired_height: '0', sig: '' },
                expect_checksums: expectCheckSums,
                redundancy_type: redundancyType,
                expect_secondary_sp_addresses: spInfo.secondarySpAddresses,
            };
            const signature = MOCK_SIGNATURE;
            const url = spInfo.endpoint + '/greenfield/admin/v1/get-approval?action=CreateObject';
            const unSignedMessageInHex = encodeObjectToHexString(msg);
            const headers = new Headers({
                // todo place the correct authorization string
                Authorization: `authTypeV2 ECDSA-secp256k1, Signature=${signature}`,
                'X-Gnfd-Unsigned-Msg': unSignedMessageInHex,
            });
            const result = await fetchWithTimeout(url, {
                headers,
                method: METHOD_GET,
            }, duration);
            const { status } = result;
            if (!result.ok) {
                return {
                    code: -1,
                    message: 'Get create object approval error.',
                    statusCode: status,
                };
            }
            const resultContentType = result.headers.get('Content-Type');
            // Will receive xml when get object met error
            if (resultContentType === 'text/xml' || resultContentType === 'application/xml') {
                const xmlText = await result.text();
                const xml = await new window.DOMParser().parseFromString(xmlText, 'text/xml');
                return {
                    code: -1,
                    xml,
                    message: 'Get create object approval error.',
                    statusCode: status,
                };
            }
            const signedMsgString = result.headers.get('X-Gnfd-Signed-Msg') || '';
            const signedMsg = decodeObjectFromHexString(signedMsgString);
            return {
                code: 0,
                message: 'Get create object approval success.',
                body: result.headers.get('X-Gnfd-Signed-Msg') ?? '',
                statusCode: status,
                signedMsg,
            };
        }
        catch (error) {
            return { code: -1, message: error.message, statusCode: NORMAL_ERROR_CODE };
        }
    }
    async createObjectTx(msg, signedMsg) {
        return await this.basic.tx(MsgCreateObjectTypeUrl, msg.creator, MsgCreateObjectSDKTypeEIP712, {
            ...signedMsg,
            type: MsgCreateObjectTypeUrl,
            visibility: signedMsg.visibility,
            primary_sp_approval: {
                expired_height: signedMsg.primary_sp_approval.expired_height,
                sig: signedMsg.primary_sp_approval.sig,
            },
            redundancy_type: signedMsg.redundancy_type,
            payload_size: signedMsg.payload_size,
        }, MsgCreateObject.encode(msg).finish());
    }
    async createObject(getApprovalParams) {
        const { signedMsg } = await this.getCreateObjectApproval(getApprovalParams);
        if (!signedMsg) {
            throw new Error('Get create object approval error');
        }
        const msg = {
            bucketName: signedMsg.bucket_name,
            creator: signedMsg.creator,
            objectName: signedMsg.object_name,
            contentType: signedMsg.content_type,
            payloadSize: Long.fromString(signedMsg.payload_size),
            visibility: visibilityTypeFromJSON(signedMsg.visibility),
            expectChecksums: signedMsg.expect_checksums.map((e) => bytesFromBase64(e)),
            expectSecondarySpAddresses: signedMsg.expect_secondary_sp_addresses,
            redundancyType: signedMsg.redundancy_type === undefined
                ? redundancyTypeFromJSON(0)
                : redundancyTypeFromJSON(signedMsg.redundancy_type),
            primarySpApproval: {
                expiredHeight: Long.fromString(signedMsg.primary_sp_approval.expired_height),
                sig: bytesFromBase64(signedMsg.primary_sp_approval.sig),
            },
        };
        return await this.createObjectTx(msg, signedMsg);
    }
    async uploadObject(configParam) {
        const { bucketName, objectName, txnHash, body, endpoint, duration = 30000 } = configParam;
        if (!isValidBucketName(bucketName)) ;
        if (!isValidUrl(endpoint)) {
            throw new Error('Invalid endpoint');
        }
        if (!isValidObjectName(objectName)) ;
        if (!txnHash) {
            throw new Error('Transaction hash is empty, please check.');
        }
        const url = generateUrlByBucketName(endpoint, bucketName) + '/' + objectName;
        // todo generate real signature
        const signature = MOCK_SIGNATURE;
        const headers = new Headers({
            // todo place the correct authorization string
            Authorization: `authTypeV2 ECDSA-secp256k1, Signature=${signature}`,
            'X-Gnfd-Txn-hash': txnHash,
        });
        try {
            const result = await fetchWithTimeout(url, {
                headers,
                method: METHOD_PUT,
                body,
            }, duration);
            const { status } = result;
            if (!result.ok) {
                return { code: -1, message: 'Put object error.', statusCode: status };
            }
            const resultContentType = result.headers.get('Content-Type');
            // Will receive xml when put object met error
            if (resultContentType === 'text/xml' || resultContentType === 'application/xml') {
                const xmlText = await result.text();
                const xml = await new window.DOMParser().parseFromString(xmlText, 'text/xml');
                return { code: -1, message: 'Put object error.', xml, statusCode: status };
            }
            return { code: 0, message: 'Put object success.', statusCode: status };
        }
        catch (error) {
            return { code: -1, message: error.message, statusCode: NORMAL_ERROR_CODE };
        }
    }
    async cancelCreateObject(msg) {
        return await this.basic.tx(MsgCancelCreateObjectTypeUrl, msg.operator, MsgCancelCreateObjectSDKTypeEIP712, MsgCancelCreateObject.toSDK(msg), MsgCancelCreateObject.encode(msg).finish());
    }
    async deleteObject(msg) {
        return await this.basic.tx(MsgDeleteObjectTypeUrl, msg.operator, MsgDeleteObjectSDKTypeEIP712, MsgDeleteObject.toSDK(msg), MsgDeleteObject.encode(msg).finish());
    }
    async headObject(bucketName, objectName) {
        const rpc = await this.queryClient.getStorageQueryClient();
        return rpc.HeadObject({
            bucketName,
            objectName,
        });
    }
    async headObjectById(objectId) {
        const rpc = await this.queryClient.getStorageQueryClient();
        return rpc.HeadObjectById({
            objectId,
        });
    }
    async getObject(configParam) {
        try {
            const { bucketName, objectName, endpoint, duration = 30000 } = configParam;
            // todo generate real signature
            const signature = MOCK_SIGNATURE;
            if (!isValidUrl(endpoint)) {
                throw new Error('Invalid endpoint');
            }
            if (!isValidBucketName(bucketName)) ;
            if (!isValidObjectName(objectName)) ;
            const url = generateUrlByBucketName(endpoint, bucketName) + '/' + objectName;
            const headers = new Headers({
                Authorization: `authTypeV2 ECDSA-secp256k1, Signature=${signature}`,
            });
            const result = await fetchWithTimeout(url, {
                headers,
                method: METHOD_GET,
            }, duration);
            const { status } = result;
            if (!result.ok) {
                return { code: -1, message: 'Get object error.', statusCode: status };
            }
            const resultContentType = result.headers.get('Content-Type');
            // Will receive xml when get object met error
            if (resultContentType === 'text/xml' || resultContentType === 'application/xml') {
                const xmlText = await result.text();
                const xml = await new window.DOMParser().parseFromString(xmlText, 'text/xml');
                return {
                    code: -1,
                    xml,
                    message: 'Get object error.',
                    statusCode: status,
                };
            }
            const fileBlob = await result.blob();
            return {
                code: 0,
                body: fileBlob,
                message: 'Get object success.',
                statusCode: status,
            };
        }
        catch (error) {
            return { code: -1, message: error.message, statusCode: NORMAL_ERROR_CODE };
        }
    }
    async downloadFile(configParam) {
        try {
            const { objectName } = configParam;
            const getObjectResult = await this.getObject(configParam);
            if (getObjectResult.code !== 0) {
                throw new Error(getObjectResult.message);
            }
            const file = getObjectResult?.body;
            if (file) {
                // const {file} = getObjectResult;
                const fileURL = URL.createObjectURL(file);
                // create <a> tag dynamically
                const fileLink = document.createElement('a');
                fileLink.href = fileURL;
                // it forces the name of the downloaded file
                fileLink.download = objectName;
                // triggers the click event
                fileLink.click();
            }
            return;
        }
        catch (error) {
            throw new Error(error);
        }
    }
    async listObjects(configParam) {
        try {
            const { bucketName, endpoint, duration = 30000 } = configParam;
            if (!isValidBucketName(bucketName)) ;
            if (!isValidUrl(endpoint)) {
                throw new Error('Invalid endpoint');
            }
            const url = generateUrlByBucketName(endpoint, bucketName);
            const signature = MOCK_SIGNATURE;
            const headers = new Headers({
                // todo place the correct authorization string
                Authorization: `authTypeV2 ECDSA-secp256k1, Signature=${signature}`,
            });
            const result = await fetchWithTimeout(url, {
                headers,
                method: METHOD_GET,
            }, duration);
            const { status } = result;
            if (!result.ok) {
                return { code: -1, message: 'List object error.', statusCode: status };
            }
            const { objects } = await result.json();
            return {
                code: 0,
                message: 'List object success.',
                statusCode: status,
                body: objects,
            };
        }
        catch (error) {
            return { code: -1, message: error.message, statusCode: NORMAL_ERROR_CODE };
        }
    }
    async createFolder(getApprovalParams) {
        if (!getApprovalParams.objectName.endsWith('/')) {
            throw new Error('failed to create folder. Folder names must end with a forward slash (/) character');
        }
        return this.createObject(getApprovalParams);
    }
};
Objectt = __decorate([
    singleton()
], Objectt);

const MsgDepositSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'authority',
        },
        {
            type: 'TypeParams',
            name: 'params',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'to',
        },
        {
            type: 'string',
            name: 'amount',
        },
    ],
    TypeParams: [
        {
            type: 'uint64',
            name: 'reserve_time',
        },
        {
            type: 'uint64',
            name: 'payment_account_count_limit',
        },
        {
            type: 'uint64',
            name: 'forced_settle_time',
        },
        {
            type: 'uint64',
            name: 'max_auto_force_settle_num',
        },
        {
            type: 'string',
            name: 'fee_denom',
        },
        {
            type: 'string',
            name: 'validator_tax_rate',
        },
    ],
};

const MsgDisableRefundSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'authority',
        },
        {
            type: 'TypeParams',
            name: 'params',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'to',
        },
        {
            type: 'string',
            name: 'amount',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'from',
        },
        {
            type: 'string',
            name: 'amount',
        },
        {
            type: 'string',
            name: 'owner',
        },
        {
            type: 'string',
            name: 'addr',
        },
    ],
    TypeParams: [
        {
            type: 'uint64',
            name: 'reserve_time',
        },
        {
            type: 'uint64',
            name: 'payment_account_count_limit',
        },
        {
            type: 'uint64',
            name: 'forced_settle_time',
        },
        {
            type: 'uint64',
            name: 'max_auto_force_settle_num',
        },
        {
            type: 'string',
            name: 'fee_denom',
        },
        {
            type: 'string',
            name: 'validator_tax_rate',
        },
    ],
};

const MsgWithdrawSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'authority',
        },
        {
            type: 'TypeParams',
            name: 'params',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'to',
        },
        {
            type: 'string',
            name: 'amount',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'from',
        },
        {
            type: 'string',
            name: 'amount',
        },
    ],
    TypeParams: [
        {
            type: 'uint64',
            name: 'reserve_time',
        },
        {
            type: 'uint64',
            name: 'payment_account_count_limit',
        },
        {
            type: 'uint64',
            name: 'forced_settle_time',
        },
        {
            type: 'uint64',
            name: 'max_auto_force_settle_num',
        },
        {
            type: 'string',
            name: 'fee_denom',
        },
        {
            type: 'string',
            name: 'validator_tax_rate',
        },
    ],
};

let Payment = class Payment {
    constructor() {
        this.basic = container.resolve(Basic);
        this.queryClient = container.resolve(RpcQueryClient);
    }
    async getStreamRecord(account) {
        const rpc = await this.queryClient.getPaymentQueryClient();
        return await rpc.StreamRecord({
            account,
        });
    }
    async params() {
        const rpc = await this.queryClient.getPaymentQueryClient();
        return await rpc.Params();
    }
    async deposit(msg) {
        return await this.basic.tx('/greenfield.payment.MsgDeposit', msg.creator, MsgDepositSDKTypeEIP712, MsgDeposit.toSDK(msg), MsgDeposit.encode(msg).finish());
    }
    async withdraw(msg) {
        return await this.basic.tx('/greenfield.payment.MsgWithdraw', msg.creator, MsgWithdrawSDKTypeEIP712, MsgWithdraw.toSDK(msg), MsgWithdraw.encode(msg).finish());
    }
    async disableRefund(msg) {
        return await this.basic.tx('/greenfield.payment.MsgDisableRefund', msg.addr, MsgDisableRefundSDKTypeEIP712, MsgDisableRefund.toSDK(msg), MsgDisableRefund.encode(msg).finish());
    }
};
Payment = __decorate([
    singleton()
], Payment);

const MsgUpdateSpStoragePriceSDKTypeEIP712 = {
    Msg: [
        {
            type: 'string',
            name: 'type',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'TypeDescription',
            name: 'description',
        },
        {
            type: 'string',
            name: 'sp_address',
        },
        {
            type: 'string',
            name: 'funding_address',
        },
        {
            type: 'string',
            name: 'seal_address',
        },
        {
            type: 'string',
            name: 'approval_address',
        },
        {
            type: 'string',
            name: 'gc_address',
        },
        {
            type: 'string',
            name: 'endpoint',
        },
        {
            type: 'TypeAmount',
            name: 'deposit',
        },
        {
            type: 'string',
            name: 'read_price',
        },
        {
            type: 'uint64',
            name: 'free_read_quota',
        },
        {
            type: 'string',
            name: 'store_price',
        },
        {
            type: 'string',
            name: 'creator',
        },
        {
            type: 'string',
            name: 'sp_address',
        },
        {
            type: 'TypeAmount',
            name: 'deposit',
        },
        {
            type: 'string',
            name: 'sp_address',
        },
        {
            type: 'string',
            name: 'endpoint',
        },
        {
            type: 'TypeDescription',
            name: 'description',
        },
        {
            type: 'string',
            name: 'seal_address',
        },
        {
            type: 'string',
            name: 'approval_address',
        },
        {
            type: 'string',
            name: 'gc_address',
        },
        {
            type: 'string',
            name: 'sp_address',
        },
        {
            type: 'string',
            name: 'read_price',
        },
        {
            type: 'uint64',
            name: 'free_read_quota',
        },
        {
            type: 'string',
            name: 'store_price',
        },
    ],
    TypeDescription: [
        {
            type: 'string',
            name: 'moniker',
        },
        {
            type: 'string',
            name: 'identity',
        },
        {
            type: 'string',
            name: 'website',
        },
        {
            type: 'string',
            name: 'security_contact',
        },
        {
            type: 'string',
            name: 'details',
        },
    ],
};

let Sp = class Sp {
    constructor(basic) {
        this.basic = basic;
        this.queryClient = container.resolve(RpcQueryClient);
    }
    async getStorageProviders() {
        const rpc = await this.queryClient.getSpQueryClient();
        const res = await rpc.StorageProviders();
        return res.sps;
    }
    async getStorageProviderInfo(spAddress) {
        const rpc = await this.queryClient.getSpQueryClient();
        const res = await rpc.StorageProvider({
            spAddress,
        });
        return res.storageProvider;
    }
    async getStoragePriceByTime(spAddress) {
        const rpc = await this.queryClient.getSpQueryClient();
        const res = await rpc.QueryGetSpStoragePriceByTime({
            timestamp: Long.fromNumber(0),
            spAddr: spAddress,
        });
        return res.spStoragePrice;
    }
    async getSecondarySpStorePrice() {
        const rpc = await this.queryClient.getSpQueryClient();
        const res = await rpc.QueryGetSecondarySpStorePriceByTime({
            timestamp: Long.fromNumber(0),
        });
        return res.secondarySpStorePrice;
    }
    async updateSpStoragePrice(address, msg) {
        return await this.basic.tx('/greenfield.sp.MsgUpdateSpStoragePrice', address, MsgUpdateSpStoragePriceSDKTypeEIP712, MsgUpdateSpStoragePrice.toSDK(msg), MsgUpdateSpStoragePrice.encode(msg).finish());
    }
};
Sp = __decorate([
    singleton(),
    __param(0, inject(delay(() => Basic))),
    __metadata("design:paramtypes", [Basic])
], Sp);

var Client_1;
let Client = Client_1 = class Client {
    static create(rpcUrl, chainId) {
        container.register('RPC_URL', { useValue: rpcUrl });
        container.register('CHAIN_ID', { useValue: chainId });
        const account = container.resolve(Account);
        const bucket = container.resolve(Bucket);
        const challenge = container.resolve(Challenge);
        const crosschain = container.resolve(CrossChain);
        const distribution = container.resolve(Distribution);
        const feegrant = container.resolve(FeeGrant);
        const group = container.resolve(Group);
        const objectt = container.resolve(Objectt);
        const payment = container.resolve(Payment);
        const sp = container.resolve(Sp);
        return new Client_1(account, bucket, challenge, crosschain, distribution, feegrant, group, objectt, payment, sp);
    }
    constructor(account, bucket, challenge, crosschain, distribution, feegrant, group, object, payment, sp) {
        this.account = account;
        this.bucket = bucket;
        this.challenge = challenge;
        this.crosschain = crosschain;
        this.distribution = distribution;
        this.feegrant = feegrant;
        this.group = group;
        this.object = object;
        this.payment = payment;
        this.sp = sp;
    }
};
Client = Client_1 = __decorate([
    injectable(),
    __metadata("design:paramtypes", [Object, Object, Object, Object, Object, Object, Object, Object, Object, Object])
], Client);

const BucketTypeAbbr = 'b';
const ObjectTypeAbbr = 'o';
const GroupTypeAbbr = 'g';
const newBucketGRN = (bucketName) => {
    return {
        resType: ResourceType.RESOURCE_TYPE_BUCKET,
        groupOwner: '',
        name: bucketName,
    };
};
const newObjectGRN = (owner, groupName) => {
    return {
        resType: ResourceType.RESOURCE_TYPE_GROUP,
        groupOwner: owner,
        name: groupName,
    };
};
const GRNToString = (grn) => {
    let res = '';
    switch (grn.resType) {
        case ResourceType.RESOURCE_TYPE_BUCKET:
            res = `grn:${BucketTypeAbbr}::${grn.name}`;
            break;
        case ResourceType.RESOURCE_TYPE_OBJECT:
            res = `grn:${ObjectTypeAbbr}::${grn.name}`;
            break;
        case ResourceType.RESOURCE_TYPE_GROUP:
            res = `grn:${GroupTypeAbbr}:${grn.groupOwner}:${grn.name}`;
            break;
        default:
            return '';
    }
    return res.trim();
};

export { Client, DEFAULT_DENOM, GRNToString, ZERO_PUBKEY, decodeFromHex, decodeObjectFromHexString, eip712Hash, encodeObjectToHexString, encodeToHex, encodeToHexString, generateUrlByBucketName, getGasFeeBySimulate, isValidAddress, isValidBucketName, isValidObjectName, isValidUrl, makeCosmsPubKey, newBucketGRN, newObjectGRN, recoverPk, sign712Tx, trimString };
