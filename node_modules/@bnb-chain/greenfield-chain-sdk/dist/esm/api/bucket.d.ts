import { ActionType } from '@bnb-chain/greenfield-cosmos-types/greenfield/permission/common';
import { QueryHeadBucketResponse, QueryVerifyPermissionResponse } from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/query';
import { MsgDeleteBucket, MsgDeletePolicy, MsgPutPolicy, MsgUpdateBucketInfo } from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/tx';
import { TxResponse } from '..';
import { BucketProps, GetObjectPropsType, getUserBucketsPropsType, ICreateBucketMsgType, IGetCreateBucketApproval, IObjectResultType, IQuotaProps } from '../types/storage';
import { Basic } from './basic';
export interface IBucket {
    /**
     * returns the signature info for the approval of preCreating resources
     */
    getCreateBucketApproval(params: IGetCreateBucketApproval): Promise<IObjectResultType<string>>;
    /**
     * get approval of creating bucket and send createBucket txn to greenfield chain
     */
    createBucket(params: IGetCreateBucketApproval): Promise<TxResponse>;
    /**
     * query the bucketInfo on chain, return the bucket info if exists
     */
    headBucket(bucketName: string): Promise<QueryHeadBucketResponse>;
    /**
     * query the bucketInfo on chain by bucketId, return the bucket info if exists
     */
    headBucketById(bucketId: string): Promise<QueryHeadBucketResponse>;
    /**
     * check if the permission of bucket is allowed to the user.
     */
    getVerifyPermission(bucketName: string, operator: string, actionType: ActionType): Promise<QueryVerifyPermissionResponse>;
    getUserBuckets(configParam: getUserBucketsPropsType): Promise<IObjectResultType<Array<BucketProps>>>;
    /**
     * return quota info of bucket of current month, include chain quota, free quota and consumed quota
     */
    getBucketReadQuota(configParam: GetObjectPropsType): Promise<IObjectResultType<IQuotaProps>>;
    deleteBucket(msg: MsgDeleteBucket): Promise<TxResponse>;
    updateBucketInfo(msg: MsgUpdateBucketInfo): Promise<TxResponse>;
    putBucketPolicy(msg: MsgPutPolicy): Promise<TxResponse>;
    deleteBucketPolicy(msg: MsgDeletePolicy): Promise<TxResponse>;
}
export declare class Bucket implements IBucket {
    private basic;
    constructor(basic: Basic);
    private queryClient;
    getCreateBucketApproval({ bucketName, creator, visibility, chargedReadQuota, spInfo, duration, }: IGetCreateBucketApproval): Promise<{
        code: number;
        xml: Document;
        message: string;
        statusCode: number;
        body?: undefined;
        signedMsg?: undefined;
    } | {
        code: number;
        message: string;
        body: string;
        statusCode: number;
        signedMsg: ICreateBucketMsgType;
        xml?: undefined;
    } | {
        code: number;
        message: any;
        statusCode: number;
        xml?: undefined;
        body?: undefined;
        signedMsg?: undefined;
    }>;
    private createBucketTx;
    createBucket(params: IGetCreateBucketApproval): Promise<{
        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
    }>;
    deleteBucket(msg: MsgDeleteBucket): Promise<{
        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
    }>;
    headBucket(bucketName: string): Promise<QueryHeadBucketResponse>;
    headBucketById(bucketId: string): Promise<QueryHeadBucketResponse>;
    getVerifyPermission(bucketName: string, operator: string, actionType: ActionType): Promise<QueryVerifyPermissionResponse>;
    getUserBuckets(configParam: getUserBucketsPropsType): Promise<{
        code: number;
        message: string;
        statusCode: number;
        body: any;
    } | {
        code: number;
        message: any;
        statusCode: number;
        body?: undefined;
    }>;
    getBucketReadQuota(configParam: GetObjectPropsType): Promise<IObjectResultType<IQuotaProps>>;
    updateBucketInfo(msg: MsgUpdateBucketInfo): Promise<{
        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
    }>;
    putBucketPolicy(msg: MsgPutPolicy): Promise<{
        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
    }>;
    deleteBucketPolicy(msg: MsgDeletePolicy): Promise<{
        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
    }>;
}
